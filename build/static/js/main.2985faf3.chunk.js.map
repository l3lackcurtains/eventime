{"version":3,"sources":["graphql/user/getUser.tsx","utils/components.tsx","components/fields/formFields.tsx","graphql/user/login.tsx","containers/auth/login.tsx","graphql/user/register.tsx","containers/auth/register.tsx","graphql/user/logout.tsx","components/dashHeader/index.tsx","components/dashSideBar/index.tsx","graphql/client/getClients.tsx","graphql/client/createClient.tsx","containers/dashboard/clients/createClient.tsx","containers/dashboard/clients/index.tsx","containers/dashboard/dash/index.tsx","graphql/expenses/getExpenses.tsx","graphql/expenses/createExpense.tsx","graphql/project/getProjects.tsx","graphql/user/getWorkspaceUsers.tsx","containers/dashboard/expenses/addExpenses.tsx","containers/dashboard/expenses/expenseChart.tsx","containers/dashboard/expenses/index.tsx","containers/dashboard/invoices/createInvoice.tsx","containers/dashboard/invoices/invoiceChart.tsx","containers/dashboard/invoices/index.tsx","graphql/project/createProject.tsx","containers/dashboard/projects/createProject.tsx","containers/dashboard/projects/index.tsx","graphql/project/getProject.tsx","graphql/project/createSection.tsx","graphql/project/createTask.tsx","graphql/project/reorderTask.tsx","graphql/section/deleteSection.tsx","utils/helpers.tsx","graphql/project/getProjectBilling.tsx","graphql/project/getProjectBudget.tsx","graphql/project/setProjectBilling.tsx","containers/dashboard/projects/singleProject/billingView.tsx","graphql/project/setProjectBudget.tsx","containers/dashboard/projects/singleProject/budgetView.tsx","graphql/timer/getTimer.tsx","containers/dashboard/projects/singleProject/cardTimer.tsx","graphql/project/updateProject.tsx","containers/dashboard/projects/singleProject/editProject.tsx","graphql/section/updateSection.tsx","containers/dashboard/projects/singleProject/editSection.tsx","containers/dashboard/projects/singleProject/styled.tsx","graphql/task/addEstimateToTask.tsx","containers/dashboard/projects/singleProject/taskView/addEstimate.tsx","graphql/task/addTimeToTask.tsx","containers/dashboard/projects/singleProject/taskView/addTimeButton.tsx","graphql/task/deleteTask.tsx","graphql/task/updateTask.tsx","containers/dashboard/projects/singleProject/taskView/editTask.tsx","graphql/timer/startTimer.tsx","graphql/timer/stopTimer.tsx","containers/dashboard/projects/singleProject/taskView/taskTimerButton.tsx","containers/dashboard/projects/singleProject/taskView/index.tsx","containers/dashboard/projects/singleProject/projectView.tsx","containers/dashboard/projects/singleProject/index.tsx","graphql/reports/getUserReports.ts","containers/dashboard/reports/summary/index.tsx","containers/dashboard/reports/timesheet/index.tsx","containers/dashboard/reports/index.tsx","graphql/timerRecords/getUserTimerRecords.tsx","containers/dashboard/timer/timerBox.tsx","containers/dashboard/timer/index.tsx","containers/dashboard/index.tsx","containers/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GET_USER","gql","_templateObject","ProtectedRoute","_ref","Component","component","rest","Object","objectWithoutProperties","_useQuery","useQuery","data","error","loading","isAuthenticated","react_default","a","createElement","react_router","assign","render","props","to","pathname","state","from","location","CustomTextInput","label","required","colon","extra","hideError","validateStatus","_useField","useField","name","_useField2","slicedToArray","field","meta","validationStatus","helpText","touched","Fragment","es_form","Item","help","input","CustomTextArea","_useField3","_useField4","TextArea_default","CustomAlert","message","type","CustomDatePicker","value","_useField5","_useField6","formik_es_production","setFieldValue","form","date_picker","moment","undefined","onChange","date","toISOString","CustomSelect","options","_useField9","_useField10","_ref3","es_select","showSearch","optionFilterProp","selected","filterOption","option","children","toLowerCase","indexOf","map","Option","key","text","CustomMultipleSelect","_useField11","_useField12","_ref4","mode","defaultValue","CustomCascader","_useField13","_useField14","displayRender","labels","selectedOptions","i","length","_ref5","cascader","styled","Alert","formFields_templateObject","LOGIN","login_templateObject","LoginSchema","Yup","shape","email","password","min","Wrapper","div","auth_login_templateObject","AuthForm","_templateObject2","MoreLinks","_templateObject3","Login","_useState","useState","_useState2","loginErrors","setLoginErrors","doLogin","useMutation","initialValues","validationSchema","onSubmit","asyncToGenerator","regenerator_default","mark","_callee","values","logged","errors","wrap","_context","prev","next","variables","sent","history","push","t0","graphQLErrors","forEach","err","index","split","stop","_x","apply","this","arguments","handleSubmit","formFields_CustomTextInput","prefix","icon","placeholder","size","es_alert","description","showIcon","closable","onClose","es_button","htmlType","react_router_dom","REGISTER","register_templateObject","RegisterSchema","passwordConfirmation","oneOf","auth_register_templateObject","register_templateObject2","register_templateObject3","Register","registerErrors","setRegisterErrors","doRegister","register_Wrapper","register_AuthForm","registered","register_MoreLinks","LOGOUT","logout_templateObject","StyledHeader","dashHeader_templateObject","DashHeader","doLogout","className","dropdown","overlay","es_menu","onClick","e","logout","preventDefault","trigger","href","avatar","menuItems","path","DashSideBar","currentPath","window","defaulSelectedMenu","menu","includes","shift","defaultSelectedKeys","style","height","borderRight","GET_CLIENTS","getClients_templateObject","CREATE_CLIENT","createClient_templateObject","createClientSchema","CreateClient","onChangeClientModalState","refetchClients","createClient","handleCreateClient","_ref2","resetForm","details","success","_x2","layout","formFields_CustomTextArea","rows","divider","columns","title","dataIndex","StyledCardTitle","clients_templateObject","StyledAboveTable","clients_templateObject2","Clients","getClients","selectedRowKeys","setSelectedRowKey","rowSelection","selKeys","hasSelected","_useState3","_useState4","createClientModalVisible","setCreateClientModalVisible","clientsData","client","id","card","placement","disabled","marginLeft","concat","table","dataSource","modal","top","visible","onOk","onCancel","width","footer","clients_createClient","refetch","Dash","GET_EXPENSES","getExpenses_templateObject","GET_EXPENSE_STATS","getExpenses_templateObject2","getExpenses_templateObject3","CREATE_EXPENSE","createExpense_templateObject","GET_PROJECTS","getProjects_templateObject","GET_PROJECTS_WITH_TASKS","getProjects_templateObject2","GET_WORKSPACE_USERS","getWorkspaceUsers_templateObject","Input","TextArea","Select","createExpenseSchema","category","user","project","categoryData","ActionButton","Button","addExpenses_templateObject","AddExpense","onChangeExpenseModalState","refetchExpenses","refetchExpensesStats","fileList","setFileList","getUsers","getProjects","usersData","users","getWorkshopUsers","projectsData","projects","results","createExpense","handleFileChange","info","toConsumableArray","slice","file","response","url","handleCreateExpense","amount","projectId","userId","formFields_CustomSelect","row","gutter","col","xs","formFields_CustomDatePicker","upload","multiple","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","ExpenseChart","expenseStatsData","expenseStat","filter","percentage","es6","labelLine","dataKey","entry","record","ExpenseDetail","pieChartColumns","expenses_templateObject","expenses_templateObject2","expenses_templateObject3","Expenses","createExpenseModalVisible","setCreateExpenseModalVisible","getExpenses","getExpenseStats","expensesData","expense","fromNow","projectName","userEmail","getGroupedExpensesStat","categoryStat","expenses_StyledCardTitle","sm","expenseChart","pagination","expenses_StyledAboveTable","addExpenses","RangePicker","DatePicker","CreateInvoice","createInvoice_Option","toString","handleChange","dateString","es_checkbox","InvoiceChart","margin","right","left","bottom","strokeDasharray","stackId","period","duration","issueDate","status","invoices_templateObject","invoices_templateObject2","Invoices","createInvoiceModalVisible","setCreateInvoiceModalVisible","onChangeInvoiceModalState","invoices_StyledCardTitle","invoiceChart","padding","borderRadius","invoices_StyledAboveTable","createInvoice","CREATE_PROJECT","createProject_templateObject","createProjectSchema","members","projects_createProject_templateObject","CreateProject","setCreateProjectModalVisible","refetchProjects","createProject","handleCreateProject","clientId","clients","formFields_CustomMultipleSelect","createProject_ActionButton","slug","projects_templateObject","projects_templateObject2","Projects","createProjectModalVisible","onChangeProjectModalState","projects_StyledCardTitle","projects_StyledAboveTable","projects_createProject","GET_PROJECT_BY_SLUG","getProject_templateObject","getProject_templateObject2","CREATE_SECTION","createSection_templateObject","CREATE_TASK","createTask_templateObject","REORDER_TASK","reorderTask_templateObject","REORDER_TASK_BETWEEN_SECTIONS","reorderTask_templateObject2","DELETE_SECTION","deleteSection_templateObject","reorderArray","list","startIndex","endIndex","result","Array","_result$splice","splice","removed","dragItemsBetweenArray","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","droppableId","GET_PROJECT_BILLING","getProjectBilling_templateObject","GET_PROJECT_BUDGET","getProjectBudget_templateObject","SET_PROJECT_BILLING","setProjectBilling_templateObject","typeOptions","CombinedInputs","billingView_templateObject","BillingView","useContext","ProjectContext","getBilling","getBudget","showEditBilling","setShowEditBilling","setBilling","handleUpdateBilling","rate","setProjectBilling","billingFormData","billingType","getProjectBilling","billing","popover","content","onVisibleChange","SET_PROJECT_BUDGET","setProjectBudget_templateObject","budgetView_templateObject","BudgetView","showEditBudget","setShowEditBudget","setBudget","handleUpdateBudget","setProjectBudget","budget","getProjectBudget","budgetFormData","budgetType","progress","parseInt","floor","budgetView_CombinedInputs","es_progress","strokeColor","GET_TIMER","getTimer_templateObject","CardTimerInner","currentTimer","now","timerStartedAt","startedAt","timerDuration","diff","timer","setTimer","runningTimer","setInterval","useEffect","clearTimeout","StyledBadge","utc","asMilliseconds","format","cardTimer_templateObject","CardTimer","task","getTimer","cardTimer_CardTimerInner","UPDATE_PROJECT","updateProject_templateObject","updateProjectSchema","editProject_templateObject","EditProject","setEditProjectVisible","_useContext","refetchProject","updateProject","handleUpdateProject","reduce","groups","u","editProject_ActionButton","UPDATE_SECTION","updateSection_templateObject","EditSectionSchema","editSection_templateObject","EditSection","setEditSectionView","section","updateSection","handleUpdate","editSection_ActionButton","ProjectWrapper","styled_templateObject","ProjectArea","styled_templateObject2","ProjectCard","Card","styled_templateObject3","ProjectCards","_templateObject4","TaskDropdown","Dropdown","_templateObject5","ProjectAreaEmpty","_templateObject6","CustomHeader","_templateObject7","ADD_ESTIMATE_TO_TASK","addEstimateToTask_templateObject","addEstimateSchema","total","addEstimate_templateObject","AddEstimateFormArea","addEstimate_templateObject2","AddEstimateButton","showForms","setShowForms","currentTask","addEstimate","handleAddEstimate","addEstimateToTask","estimate","block","addEstimate_ActionButton","ADD_TIME_TO_TASK","addTimeToTask_templateObject","addTimeSchema","matches","addTimeButton_templateObject","AddTimeFormArea","addTimeButton_templateObject2","AddTimeButton","addTime","handleAddTime","taskId","addTimeToTask","addTimeButton_ActionButton","DELETE_TASK","deleteTask_templateObject","UPDATE_TASK","updateTask_templateObject","EditTaskSchema","Actions","editTask_templateObject","editTask_templateObject2","DeleteButton","editTask_templateObject3","EditTask","setShowEditTask","setTaskModalVisible","updateTask","deleteTask","dueAt","confirm","Modal","handleDeleteTask","_callee2","_context2","_onOk","_callee3","_context3","editTask_ActionButton","START_TIMER","startTimer_templateObject","STOP_TIMER","stopTimer_templateObject","TaskTimerButtonInner","isTimerStarted","refetchTimer","timerStarted","setTimerStarted","_useState5","_useState6","starting","setStarting","startTimer","startTaskTimer","setTimeout","stopTimer","stopTaskTimer","ActionButtonStop","ActionButtonStart","taskTimerButton_templateObject","taskTimerButton_templateObject2","TaskTimerButton","taskTimerButton_TaskTimerButtonInner","taskView_templateObject","TaskView","taskModalVisible","showEditTask","destroyOnClose","editTask","taskTimerButton","addTimeButton","taskView_ActionButton","taskView_addEstimate","createdAt","CreateTaskSchema","ProjectView","projectTasks","editSectionView","editProjectVisible","reorderTask","reorderTaskBetweenSections","createTask","createSection","_useState7","sectionIndex","taskIndex","_useState8","setCurrentTask","deleteSection","_useState9","_useState10","addProjectAreaButton","setAddProjectAreaButton","_useState11","_useState12","taskCardAddSection","setTaskCardAddSection","handleCreateSection","setSubmitting","setStatus","handleCreateTask","allTasks","JSON","parse","stringify","sectionId","sections","_x3","_x4","_x5","handleDeleteSection","_callee4","_context4","destroyAll","zIndex","maskClosable","_x6","onDragCardEnd","_ref6","_callee5","items","srcTaskId","destTaskId","_result","_projectTasksData","_context5","abrupt","tasks","projectTasksData","keys","keyId","sourceSectionId","destinationSectionId","_x7","fontSize","fontWeight","billingView","budgetView","react_beautiful_dnd_esm","onDragEnd","res","editSection","tag","color","provided","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","timerRecords","sum","tr","getTaskRecordsTotalHour","cardTimer","src","backgroundColor","_len","args","_key","taskView","editProject","React","createContext","SingleProject","fetchProject","getProject","getProjectBySlug","Provider","projectView","GET_REPORTS_BY_MEMBER","getUserReports_templateObject","expandedRowRender","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","tid","totalDuration","return","Summary","getReports","reports","getReportsByMember","report","uid","TimeSheetTitle","timesheet_templateObject","Timesheet","reports_templateObject","Reports","currentReportType","reportType","setReportType","reports_StyledCardTitle","es_radio","Group","target","exact","GET_USER_TIMER_RECORDS","getUserTimerRecords_templateObject","startTimerSchema","TimerButton","refetchTimerRecords","StyledButton","timerBox_templateObject","StyledTaskName","p","timerBox_templateObject2","TimerBox","handleStartTimer","getProjectWithTasks","s","t","justify","align","lg","formFields_CustomCascader","timerBox_TimerButton","Panel","Collapse","DateTitle","timer_templateObject","StyledPanel","timer_templateObject2","StyledCollapse","timer_templateObject3","RecordHistory","timer_templateObject4","Timer","getTimerRecords","formattedTmerRecords","rec","groupByTask","dateRecords","dur","taskRecords","groupedTimerRecords","getUserTimerRecords","timerBox","timerRecord","es_list","itemLayout","renderItem","item","bordered","defaultActiveKey","expandIcon","isActive","rotate","header","taskRecord","Header","Layout","Content","Footer","Sider","StyledSider","dashboard_templateObject","DrawerOpenerButton","dashboard_templateObject2","dashboard_templateObject3","StyledContent","dashboard_templateObject4","StyledFooter","dashboard_templateObject5","Dashboard","collapsed","setCollapsed","drawerVisible","setDrawerVisible","minHeight","collapsible","onCollapse","background","alt","dashSideBar","drawer","dashboard_StyledHeader","dashHeader","components","Home","MainApp","ApolloClient","uri","credentials","cache","InMemoryCache","App","ApolloContext","react","fallback","containers","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2985faf3.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\nexport const GET_USER = gql`\r\n  {\r\n    getUser {\r\n      id\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport { Redirect, Route } from \"react-router\";\r\nimport { GET_USER } from \"../graphql/user/getUser\";\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }: any) => {\r\n  const { data, error, loading } = useQuery(GET_USER);\r\n  const isAuthenticated = !error && data;\r\n\r\n  if (loading) return null;\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        isAuthenticated ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: props.location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import {\r\n  Alert,\r\n  Cascader,\r\n  DatePicker,\r\n  Form,\r\n  Input,\r\n  Select,\r\n  TimePicker\r\n} from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { Field, FieldProps, useField } from \"formik\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CustomTextInput = (props: any) => {\r\n  const {\r\n    label,\r\n    required,\r\n    colon,\r\n    extra,\r\n    hideError,\r\n    validateStatus,\r\n    ...rest\r\n  } = props;\r\n  const [field, meta] = useField(props.name);\r\n  let validationStatus: any = validateStatus || \"\";\r\n  let helpText = \"\";\r\n\r\n  if (meta.touched && meta.error) {\r\n    validationStatus = \"error\";\r\n    if (!hideError) {\r\n      helpText = meta.error;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form.Item\r\n        label={label}\r\n        required={required}\r\n        colon={colon}\r\n        extra={extra}\r\n        validateStatus={validationStatus}\r\n        help={helpText}\r\n      >\r\n        <Input {...rest} {...field} />\r\n      </Form.Item>\r\n    </>\r\n  );\r\n};\r\n\r\nconst CustomTextArea = (props: any) => {\r\n  const { label, required, colon, extra, validateStatus, ...rest } = props;\r\n\r\n  const [field, meta] = useField(props.name);\r\n  return (\r\n    <>\r\n      <Form.Item\r\n        label={label}\r\n        required={required}\r\n        colon={colon}\r\n        extra={extra}\r\n        validateStatus={validateStatus}\r\n      >\r\n        <TextArea {...rest} {...field} />\r\n      </Form.Item>\r\n      {meta.touched && meta.error ? (\r\n        <CustomAlert message={meta.error} type=\"error\" />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CustomDatePicker = (props: any) => {\r\n  const {\r\n    label,\r\n    required,\r\n    colon,\r\n    extra,\r\n    validateStatus,\r\n    value,\r\n    ...rest\r\n  } = props;\r\n  const [field, meta] = useField(props.name);\r\n\r\n  return (\r\n    <>\r\n      <Form.Item\r\n        label={label}\r\n        required={required}\r\n        colon={colon}\r\n        extra={extra}\r\n        validateStatus={validateStatus}\r\n      >\r\n        <Field name={field.name}>\r\n          {({ field: { value }, form: { setFieldValue } }: FieldProps) => (\r\n            <DatePicker\r\n              value={value ? moment(value) : undefined}\r\n              onChange={date =>\r\n                setFieldValue(field.name, date ? date.toISOString() : null)\r\n              }\r\n              {...rest}\r\n            />\r\n          )}\r\n        </Field>\r\n      </Form.Item>\r\n      {meta.touched && meta.error ? (\r\n        <CustomAlert message={meta.error} type=\"error\" />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CustomTimePicker = (props: any) => {\r\n  const {\r\n    label,\r\n    required,\r\n    colon,\r\n    extra,\r\n    validateStatus,\r\n    value,\r\n    ...rest\r\n  } = props;\r\n  const [field, meta] = useField(props.name);\r\n\r\n  return (\r\n    <>\r\n      <Form.Item\r\n        label={label}\r\n        required={required}\r\n        colon={colon}\r\n        extra={extra}\r\n        validateStatus={validateStatus}\r\n      >\r\n        <Field name={field.name}>\r\n          {({ field: { value }, form: { setFieldValue } }: FieldProps) => (\r\n            <TimePicker\r\n              value={value ? moment(value) : undefined}\r\n              onChange={time =>\r\n                setFieldValue(field.name, time ? time.toISOString() : null)\r\n              }\r\n              use12Hours\r\n              format=\"h:mm a\"\r\n              {...rest}\r\n            />\r\n          )}\r\n        </Field>\r\n      </Form.Item>\r\n      {meta.touched && meta.error ? (\r\n        <CustomAlert message={meta.error} type=\"error\" />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CustomSelect = (props: any) => {\r\n  const {\r\n    label,\r\n    required,\r\n    colon,\r\n    extra,\r\n    validateStatus,\r\n    value,\r\n    options,\r\n    ...rest\r\n  } = props;\r\n  const [field, meta] = useField(props.name);\r\n\r\n  return (\r\n    <>\r\n      <Form.Item\r\n        label={label}\r\n        required={required}\r\n        colon={colon}\r\n        extra={extra}\r\n        validateStatus={validateStatus}\r\n      >\r\n        <Field name={field.name}>\r\n          {({ field: { value }, form: { setFieldValue } }: FieldProps) => (\r\n            <Select\r\n              showSearch\r\n              value={value ? value : undefined}\r\n              optionFilterProp=\"children\"\r\n              onChange={(selected: any) => setFieldValue(field.name, selected)}\r\n              filterOption={(input: any, option: any) =>\r\n                option.props.children\r\n                  .toLowerCase()\r\n                  .indexOf(input.toLowerCase()) >= 0\r\n              }\r\n              {...rest}\r\n            >\r\n              {options.map((option: any) => (\r\n                <Select.Option key={option.key} value={option.value}>\r\n                  {option.text}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          )}\r\n        </Field>\r\n      </Form.Item>\r\n      {meta.touched && meta.error ? (\r\n        <CustomAlert message={meta.error} type=\"error\" />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CustomMultipleSelect = (props: any) => {\r\n  const {\r\n    label,\r\n    required,\r\n    colon,\r\n    extra,\r\n    validateStatus,\r\n    value,\r\n    options,\r\n    ...rest\r\n  } = props;\r\n  const [field, meta] = useField(props.name);\r\n\r\n  return (\r\n    <>\r\n      <Form.Item\r\n        label={label}\r\n        required={required}\r\n        colon={colon}\r\n        extra={extra}\r\n        validateStatus={validateStatus}\r\n      >\r\n        <Field name={field.name}>\r\n          {({ field: { value }, form: { setFieldValue } }: FieldProps) => (\r\n            <Select\r\n              showSearch\r\n              mode=\"multiple\"\r\n              value={value ? value : undefined}\r\n              optionFilterProp=\"children\"\r\n              defaultValue={[]}\r\n              onChange={(selected: any) => setFieldValue(field.name, selected)}\r\n              filterOption={(input: any, option: any) =>\r\n                option.props.children\r\n                  .toLowerCase()\r\n                  .indexOf(input.toLowerCase()) >= 0\r\n              }\r\n              {...rest}\r\n            >\r\n              {options.map((option: any) => (\r\n                <Select.Option key={option.key} value={option.value}>\r\n                  {option.text}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          )}\r\n        </Field>\r\n      </Form.Item>\r\n      {meta.touched && meta.error ? (\r\n        <CustomAlert message={meta.error} type=\"error\" />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CustomCascader = (props: any) => {\r\n  const { label, required, colon, extra, value, options, ...rest } = props;\r\n  const [field, meta] = useField(props.name);\r\n  const displayRender = (labels: any, selectedOptions: any) =>\r\n    labels.map((label: any, i: number) => {\r\n      const option = selectedOptions[i];\r\n      if (i === labels.length - 1) {\r\n        return <span key={option.value}>{label}</span>;\r\n      }\r\n      return <span key={option.value}>{label} / </span>;\r\n    });\r\n  return (\r\n    <>\r\n      <Form.Item label={label} required={required} colon={colon} extra={extra}>\r\n        <Field name={field.name}>\r\n          {({ field: { value }, form: { setFieldValue } }: FieldProps) => (\r\n            <Cascader\r\n              options={options}\r\n              displayRender={displayRender}\r\n              value={value ? value : undefined}\r\n              onChange={(selected: any) => setFieldValue(field.name, selected)}\r\n              defaultValue={[]}\r\n              {...rest}\r\n            />\r\n          )}\r\n        </Field>\r\n      </Form.Item>\r\n      {meta.touched && meta.error ? (\r\n        <CustomAlert message={meta.error} type=\"error\" />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CustomAlert = styled(Alert)`\r\n  margin-bottom: 16px;\r\n  margin-top: -24px;\r\n`;\r\n\r\nexport {\r\n  CustomTextInput,\r\n  CustomTextArea,\r\n  CustomDatePicker,\r\n  CustomTimePicker,\r\n  CustomSelect,\r\n  CustomMultipleSelect,\r\n  CustomCascader\r\n};\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const LOGIN = gql`\r\n  mutation Login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password)\r\n  }\r\n`;\r\n","import { Alert, Button, Form, Icon } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport { CustomTextInput } from \"../../components/fields/formFields\";\r\nimport { LOGIN } from \"../../graphql/user/login\";\r\n\r\nconst LoginSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(\"Invalid email\")\r\n    .required(\"Email is Required\"),\r\n  password: Yup.string()\r\n    .required(\"Password is required\")\r\n    .min(6, \"Password too Short!\")\r\n});\r\n\r\nconst Login = (props: any) => {\r\n  const [loginErrors, setLoginErrors] = useState([]);\r\n  const doLogin = useMutation(LOGIN);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <AuthForm>\r\n        <Formik\r\n          initialValues={{ email: \"\", password: \"\" }}\r\n          validationSchema={LoginSchema}\r\n          onSubmit={async values => {\r\n            const { email, password } = values;\r\n            try {\r\n              const logged = await doLogin({\r\n                variables: {\r\n                  email,\r\n                  password\r\n                }\r\n              });\r\n\r\n              setLoginErrors([]);\r\n              if (logged.data) {\r\n                props.history.push(\"/dashboard\");\r\n              }\r\n            } catch (e) {\r\n              let errors: any = [];\r\n              e.graphQLErrors.forEach((err: any, index: number) => {\r\n                errors.push(err.message.split(\"rror:\")[1]);\r\n              });\r\n              setLoginErrors(errors);\r\n            }\r\n          }}\r\n          render={(props: any) => (\r\n            <Form onSubmit={props.handleSubmit}>\r\n              <CustomTextInput\r\n                prefix={<Icon type=\"user\" />}\r\n                placeholder=\"email\"\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                size=\"large\"\r\n              />\r\n              <CustomTextInput\r\n                prefix={<Icon type=\"lock\" />}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                size=\"large\"\r\n              />\r\n              <Form.Item>\r\n                {loginErrors.length > 0 ? (\r\n                  <Alert\r\n                    message=\"Error\"\r\n                    description={\r\n                      <>\r\n                        {loginErrors.map((err: string, index: number) => (\r\n                          <div key={index}>{err}</div>\r\n                        ))}\r\n                      </>\r\n                    }\r\n                    type=\"error\"\r\n                    showIcon\r\n                    closable\r\n                    onClose={() => setLoginErrors([])}\r\n                  />\r\n                ) : null}\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Login\r\n                </Button>\r\n              </Form.Item>\r\n              <MoreLinks>\r\n                <NavLink to=\"/register\">Register</NavLink>\r\n              </MoreLinks>\r\n            </Form>\r\n          )}\r\n        />\r\n      </AuthForm>\r\n    </Wrapper>\r\n  );\r\n};\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin: 120px 0;\r\n`;\r\nconst AuthForm = styled.div`\r\n  width: 450px;\r\n  padding: 36px;\r\n  background: #fff;\r\n  border: 2px solid #e3e3e3;\r\n  border-radius: 10px;\r\n`;\r\nconst MoreLinks = styled.div`\r\n  margin: 16px 4px;\r\n`;\r\nexport default Login;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const REGISTER = gql`\r\n  mutation Register($email: String!, $password: String!, $name: String!) {\r\n    register(email: $email, password: $password, name: $name)\r\n  }\r\n`;\r\n","import { Alert, Button, Form, Icon } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport { CustomTextInput } from \"../../components/fields/formFields\";\r\nimport { REGISTER } from \"../../graphql/user/register\";\r\n\r\nconst RegisterSchema = Yup.object().shape({\r\n  name: Yup.string().required(\"Name is Required\"),\r\n  email: Yup.string()\r\n    .email(\"Invalid email\")\r\n    .required(\"Email is Required\"),\r\n  password: Yup.string()\r\n    .required(\"Password is required\")\r\n    .min(6, \"Password too Short!\"),\r\n  passwordConfirmation: Yup.string().oneOf(\r\n    [Yup.ref(\"password\"), \"\"],\r\n    \"Passwords must match\"\r\n  )\r\n});\r\n\r\nconst Register = (props: any) => {\r\n  const [registerErrors, setRegisterErrors] = useState([]);\r\n  const doRegister = useMutation(REGISTER);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <AuthForm>\r\n        <Formik\r\n          initialValues={{ email: \"\", password: \"\", name: \"\" }}\r\n          validationSchema={RegisterSchema}\r\n          onSubmit={async values => {\r\n            const { email, password, name } = values;\r\n            try {\r\n              const registered = await doRegister({\r\n                variables: {\r\n                  name,\r\n                  email,\r\n                  password\r\n                }\r\n              });\r\n\r\n              setRegisterErrors([]);\r\n              if (registered.data) {\r\n                props.history.push(\"/login\");\r\n              }\r\n            } catch (e) {\r\n              let errors: any = [];\r\n              e.graphQLErrors.forEach((err: any, index: number) => {\r\n                errors.push(err.message.split(\"rror:\")[1]);\r\n              });\r\n              setRegisterErrors(errors);\r\n            }\r\n          }}\r\n          render={(props: any) => (\r\n            <Form onSubmit={props.handleSubmit}>\r\n              <CustomTextInput\r\n                prefix={<Icon type=\"user\" />}\r\n                placeholder=\"name\"\r\n                label=\"Name\"\r\n                name=\"name\"\r\n                size=\"large\"\r\n              />\r\n              <CustomTextInput\r\n                prefix={<Icon type=\"user\" />}\r\n                placeholder=\"email\"\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                size=\"large\"\r\n              />\r\n              <CustomTextInput\r\n                prefix={<Icon type=\"lock\" />}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                size=\"large\"\r\n              />\r\n              <CustomTextInput\r\n                prefix={<Icon type=\"lock\" />}\r\n                type=\"password\"\r\n                placeholder=\"Retype Password\"\r\n                label=\"Retype Password\"\r\n                name=\"passwordConfirmation\"\r\n                size=\"large\"\r\n              />\r\n              <Form.Item>\r\n                {registerErrors.length > 0 ? (\r\n                  <Alert\r\n                    message=\"Error\"\r\n                    description={\r\n                      <>\r\n                        {registerErrors.map((err: string, index: number) => (\r\n                          <div key={index}>{err}</div>\r\n                        ))}\r\n                      </>\r\n                    }\r\n                    type=\"error\"\r\n                    showIcon\r\n                    closable\r\n                    onClose={() => setRegisterErrors([])}\r\n                  />\r\n                ) : null}\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Register\r\n                </Button>\r\n              </Form.Item>\r\n              <MoreLinks>\r\n                <NavLink to=\"/login\">Login</NavLink>\r\n              </MoreLinks>\r\n            </Form>\r\n          )}\r\n        />\r\n      </AuthForm>\r\n    </Wrapper>\r\n  );\r\n};\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin: 120px 0;\r\n`;\r\nconst AuthForm = styled.div`\r\n  width: 450px;\r\n  padding: 36px;\r\n  background: #fff;\r\n  border: 2px solid #e3e3e3;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst MoreLinks = styled.div`\r\n  margin: 16px 4px;\r\n`;\r\n\r\nexport default Register;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const LOGOUT = gql`\r\n  mutation Logout {\r\n    logout\r\n  }\r\n`;\r\n","import { Avatar, Dropdown, Icon, Menu } from \"antd\";\r\nimport React from \"react\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport { LOGOUT } from \"../../graphql/user/logout\";\r\n\r\nconst DashHeader = (props: any) => {\r\n  const doLogout = useMutation(LOGOUT);\r\n  return (\r\n    <StyledHeader>\r\n      <div className=\"header-left\" />\r\n      <div className=\"header-right\">\r\n        <Dropdown\r\n          overlay={\r\n            <Menu>\r\n              <Menu.Item>\r\n                <a onClick={() => {}}>Edit Profile</a>\r\n              </Menu.Item>\r\n              <Menu.Item>\r\n                <a\r\n                  onClick={async (e: any) => {\r\n                    e.preventDefault();\r\n                    const logout = await doLogout();\r\n                    if (logout && logout.data) {\r\n                      props.history.push(\"/login\");\r\n                    }\r\n                  }}\r\n                >\r\n                  Logout\r\n                </a>\r\n              </Menu.Item>\r\n            </Menu>\r\n          }\r\n          trigger={[\"click\"]}\r\n        >\r\n          <a className=\"ant-dropdown-link\" href=\"#\">\r\n            <span>\r\n              Madhav Poudel <Icon type=\"down\" />\r\n            </span>\r\n            <Avatar size={48} icon=\"user\" />\r\n          </a>\r\n        </Dropdown>\r\n      </div>\r\n    </StyledHeader>\r\n  );\r\n};\r\n\r\nconst StyledHeader = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto 250px;\r\n  width: 100%;\r\n  .header-right {\r\n    span {\r\n      margin-right: 16px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default DashHeader;\r\n","import { Icon, Menu } from \"antd\";\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst menuItems = [\r\n  {\r\n    key: 1,\r\n    name: \"Dashboard\",\r\n    path: \"/dashboard\",\r\n    icon: \"pie-chart\"\r\n  },\r\n  {\r\n    key: 2,\r\n    name: \"Timer\",\r\n    path: \"/dashboard/timer\",\r\n    icon: \"desktop\"\r\n  },\r\n  {\r\n    key: 3,\r\n    name: \"Projects\",\r\n    path: \"/dashboard/projects\",\r\n    icon: \"check-square\"\r\n  },\r\n  {\r\n    key: 4,\r\n    name: \"Clients\",\r\n    path: \"/dashboard/clients\",\r\n    icon: \"usergroup-add\"\r\n  },\r\n  {\r\n    key: 5,\r\n    name: \"Reports\",\r\n    path: \"/dashboard/reports\",\r\n    icon: \"snippets\"\r\n  },\r\n  {\r\n    key: 6,\r\n    name: \"Expenses\",\r\n    path: \"/dashboard/expenses\",\r\n    icon: \"pie-chart\"\r\n  },\r\n  {\r\n    key: 7,\r\n    name: \"Invoices\",\r\n    path: \"/dashboard/invoices\",\r\n    icon: \"area-chart\"\r\n  }\r\n];\r\n\r\nconst DashSideBar = () => {\r\n  const currentPath = window.location.pathname;\r\n  const defaulSelectedMenu: any[] = [];\r\n  menuItems.forEach((menu: any) => {\r\n    if (currentPath.includes(menu.path)) {\r\n      defaulSelectedMenu.push(\"\" + menu.key);\r\n    }\r\n  });\r\n\r\n  if (defaulSelectedMenu.length > 1) defaulSelectedMenu.shift();\r\n\r\n  return (\r\n    <Menu\r\n      defaultSelectedKeys={defaulSelectedMenu}\r\n      mode=\"inline\"\r\n      style={{ height: \"100%\", borderRight: 0 }}\r\n    >\r\n      {menuItems.map((menu: any) => (\r\n        <Menu.Item key={menu.key}>\r\n          <NavLink to={menu.path}>\r\n            <Icon type={menu.icon} />\r\n            <span className=\"nav-text\">{menu.name}</span>\r\n          </NavLink>\r\n        </Menu.Item>\r\n      ))}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default DashSideBar;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_CLIENTS = gql`\r\n  {\r\n    getClients {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const CREATE_CLIENT = gql`\r\n  mutation CreateClient($name: String!, $details: String) {\r\n    createClient(name: $name, details: $details) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button, Divider, Form } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  CustomTextArea,\r\n  CustomTextInput\r\n} from \"../../../components/fields/formFields\";\r\nimport { CREATE_CLIENT } from \"../../../graphql/client/createClient\";\r\n\r\nconst createClientSchema = Yup.object().shape({\r\n  name: Yup.string().required(\"Name is Required\")\r\n});\r\n\r\nconst CreateClient = (props: any) => {\r\n  const { onChangeClientModalState, refetchClients } = props;\r\n  const createClient = useMutation(CREATE_CLIENT);\r\n  const handleCreateClient = async (values: any, { resetForm }: any) => {\r\n    const { name, details } = values;\r\n    const created = await createClient({\r\n      variables: {\r\n        name,\r\n        details\r\n      }\r\n    });\r\n\r\n    if (created.data.createClient.success) {\r\n      onChangeClientModalState(false);\r\n      resetForm();\r\n      refetchClients();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{}}\r\n      validationSchema={createClientSchema}\r\n      onSubmit={handleCreateClient}\r\n      render={(props: any) => (\r\n        <Form layout=\"vertical\" onSubmit={props.handleSubmit}>\r\n          <CustomTextInput\r\n            label=\"Client name\"\r\n            size=\"large\"\r\n            placeholder=\"Name of client\"\r\n            name=\"name\"\r\n          />\r\n          <CustomTextArea\r\n            label=\"Client Information\"\r\n            placeholder=\"Important information about clients\"\r\n            rows={4}\r\n            name=\"details\"\r\n          />\r\n          <Divider />\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Create Client\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CreateClient;\r\n","import { Button, Card, Dropdown, Menu, Modal, Table } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport { GET_CLIENTS } from \"../../../graphql/client/getClients\";\r\nimport CreateClient from \"./createClient\";\r\n\r\nconst menu = (\r\n  <Menu>\r\n    <Menu.Item>Archive</Menu.Item>\r\n    <Menu.Item>Unarchive</Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\"\r\n  }\r\n];\r\n\r\nconst Clients = () => {\r\n  const getClients = useQuery(GET_CLIENTS);\r\n\r\n  const [selectedRowKeys, setSelectedRowKey] = useState([]);\r\n\r\n  const onTableRowSelection = (selKeys: any) => {\r\n    setSelectedRowKey(selKeys);\r\n  };\r\n\r\n  const rowSelection = {\r\n    selectedRowKeys,\r\n    onChange: onTableRowSelection\r\n  };\r\n\r\n  const hasSelected = selectedRowKeys.length > 0;\r\n\r\n  // create client modal\r\n  const [createClientModalVisible, setCreateClientModalVisible] = useState(\r\n    false\r\n  );\r\n\r\n  const onChangeClientModalState = (state: boolean) => {\r\n    setCreateClientModalVisible(state);\r\n  };\r\n\r\n  if (getClients.loading) return null;\r\n  if (getClients.error) {\r\n    return <div>Error loading client..</div>;\r\n  }\r\n\r\n  const clientsData = getClients.data.getClients;\r\n  clientsData.map((client: any) => {\r\n    client.key = client.id;\r\n    return client;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        title={\r\n          <>\r\n            <StyledCardTitle>\r\n              <h1>Clients</h1>\r\n              <Button\r\n                type=\"primary\"\r\n                icon=\"plus\"\r\n                size=\"large\"\r\n                onClick={() => onChangeClientModalState(true)}\r\n              >\r\n                Add Client\r\n              </Button>\r\n            </StyledCardTitle>\r\n          </>\r\n        }\r\n      >\r\n        <StyledAboveTable>\r\n          <Dropdown\r\n            overlay={menu}\r\n            placement=\"bottomCenter\"\r\n            disabled={!hasSelected}\r\n          >\r\n            <Button type=\"dashed\">Bulk Actions</Button>\r\n          </Dropdown>\r\n          <span style={{ marginLeft: 8 }}>\r\n            {hasSelected ? `Selected ${selectedRowKeys.length} items` : \"\"}\r\n          </span>\r\n        </StyledAboveTable>\r\n        <Table\r\n          rowSelection={rowSelection}\r\n          columns={columns}\r\n          dataSource={clientsData}\r\n        />\r\n      </Card>\r\n      <Modal\r\n        title=\"Add a new Client\"\r\n        style={{ top: 20 }}\r\n        visible={createClientModalVisible}\r\n        onOk={() => onChangeClientModalState(false)}\r\n        onCancel={() => onChangeClientModalState(false)}\r\n        width={750}\r\n        footer={null}\r\n      >\r\n        <CreateClient\r\n          onChangeClientModalState={onChangeClientModalState}\r\n          refetchClients={getClients.refetch}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\n// TODO: Need to make it reusable\r\nconst StyledCardTitle = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  h1 {\r\n    padding: 8px 0;\r\n  }\r\n`;\r\n\r\nconst StyledAboveTable = styled.div`\r\n  margin: 24px 0;\r\n`;\r\n\r\nexport default Clients;\r\n","import React from \"react\";\r\n\r\nconst Dash = () => {\r\n  return <div>Dash Page</div>;\r\n};\r\n\r\nexport default Dash;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_EXPENSES = gql`\r\n  {\r\n    getExpenses {\r\n      amount\r\n      details\r\n      billable\r\n      category\r\n      date\r\n      user {\r\n        email\r\n      }\r\n      project {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_EXPENSE = gql`\r\n  query getExpense($id: ID!) {\r\n    getExpense(id: $id) {\r\n      amount\r\n      details\r\n      billable\r\n      category\r\n      date\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_EXPENSE_STATS = gql`\r\n  query getGroupedExpensesStat {\r\n    getGroupedExpensesStat {\r\n      total\r\n      categoryStat {\r\n        total\r\n        category\r\n        percentage\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const CREATE_EXPENSE = gql`\r\n  mutation createExpense(\r\n    $amount: Int!\r\n    $projectId: ID!\r\n    $userId: ID!\r\n    $details: String\r\n    $billable: Boolean\r\n    $category: String!\r\n    $date: String!\r\n  ) {\r\n    createExpense(\r\n      amount: $amount\r\n      projectId: $projectId\r\n      userId: $userId\r\n      details: $details\r\n      billable: $billable\r\n      category: $category\r\n      date: $date\r\n    )\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_PROJECTS = gql`\r\n  {\r\n    getProjects {\r\n      success\r\n      results {\r\n        id\r\n        name\r\n        slug\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_PROJECTS_WITH_TASKS = gql`\r\n  {\r\n    getProjectWithTasks {\r\n      success\r\n      results {\r\n        id\r\n        name\r\n        sections {\r\n          id\r\n          name\r\n          tasks {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_WORKSPACE_USERS = gql`\r\n  {\r\n    getWorkshopUsers {\r\n      id\r\n      email\r\n    }\r\n  }\r\n`;\r\n","import { Button, Col, Form, Icon, Input, Row, Select, Upload } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  CustomDatePicker,\r\n  CustomSelect,\r\n  CustomTextArea,\r\n  CustomTextInput\r\n} from \"../../../components/fields/formFields\";\r\nimport { CREATE_EXPENSE } from \"../../../graphql/expenses/createExpense\";\r\nimport { GET_PROJECTS } from \"../../../graphql/project/getProjects\";\r\nimport { GET_WORKSPACE_USERS } from \"../../../graphql/user/getWorkspaceUsers\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst createExpenseSchema = Yup.object().shape({\r\n  category: Yup.string().required(\"Category is Required\"),\r\n  details: Yup.string().required(\"Details is required\"),\r\n  user: Yup.string().required(\"Member is required.\"),\r\n  project: Yup.string().required(\"Project is required.\")\r\n});\r\n\r\nconst categoryData = [\r\n  {\r\n    key: 1,\r\n    value: \"transportation\",\r\n    text: \"Transportation\"\r\n  },\r\n  {\r\n    key: 2,\r\n    value: \"infrastracture\",\r\n    text: \"Infrastracture\"\r\n  },\r\n  {\r\n    key: 3,\r\n    value: \"officeNeed\",\r\n    text: \"Office needs\"\r\n  },\r\n  {\r\n    key: 4,\r\n    value: \"service\",\r\n    text: \"Service\"\r\n  },\r\n  {\r\n    key: 5,\r\n    value: \"others\",\r\n    text: \"Others\"\r\n  }\r\n];\r\n\r\nconst AddExpense = (props: any) => {\r\n  const {\r\n    onChangeExpenseModalState,\r\n    refetchExpenses,\r\n    refetchExpensesStats\r\n  } = props;\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  const getUsers = useQuery(GET_WORKSPACE_USERS);\r\n\r\n  const getProjects = useQuery(GET_PROJECTS);\r\n\r\n  let usersData: any[] = [];\r\n  if (!getUsers.loading && !getUsers.error) {\r\n    const users = getUsers.data.getWorkshopUsers;\r\n    usersData = users.map((user: any) => {\r\n      user.key = user.id;\r\n      user.value = user.id;\r\n      user.text = user.email;\r\n      return user;\r\n    });\r\n  }\r\n\r\n  let projectsData: any[] = [];\r\n  if (!getProjects.loading && !getProjects.error) {\r\n    const projects = getProjects.data.getProjects.results;\r\n    projectsData = projects.map((project: any) => {\r\n      project.key = project.id;\r\n      project.value = project.id;\r\n      project.text = project.name;\r\n      return project;\r\n    });\r\n  }\r\n\r\n  const createExpense = useMutation(CREATE_EXPENSE);\r\n  function handleFileChange(info: any) {\r\n    let fileList: any = [...info.fileList];\r\n    fileList = fileList.slice(-2);\r\n    fileList = fileList.map((file: any) => {\r\n      if (file.response) {\r\n        file.url = file.response.url;\r\n      }\r\n      return file;\r\n    });\r\n\r\n    setFileList(fileList);\r\n    return null;\r\n  }\r\n\r\n  const handleCreateExpense = async (values: any, { resetForm }: any) => {\r\n    const { category, date, amount, project, user, details } = values;\r\n\r\n    const created = await createExpense({\r\n      variables: {\r\n        category,\r\n        date,\r\n        amount,\r\n        projectId: project,\r\n        userId: user,\r\n        details\r\n      }\r\n    });\r\n\r\n    if (created.data.createExpense) {\r\n      resetForm();\r\n      onChangeExpenseModalState(false);\r\n      refetchExpenses();\r\n      refetchExpensesStats();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <Formik\r\n        initialValues={{}}\r\n        validationSchema={createExpenseSchema}\r\n        onSubmit={handleCreateExpense}\r\n        render={(props: any) => (\r\n          <Form layout=\"vertical\" onSubmit={props.handleSubmit}>\r\n            <CustomSelect\r\n              label=\"Category\"\r\n              size=\"large\"\r\n              placeholder=\"Select a Category\"\r\n              name=\"category\"\r\n              options={categoryData}\r\n            />\r\n            <CustomTextArea\r\n              label=\"Details\"\r\n              size=\"large\"\r\n              placeholder=\"Details of expense\"\r\n              name=\"details\"\r\n              rows={5}\r\n            />\r\n            <Row type=\"flex\" gutter={16}>\r\n              <Col xs={12}>\r\n                <CustomTextInput\r\n                  label=\"Expense Amount\"\r\n                  name=\"amount\"\r\n                  size=\"large\"\r\n                  placeholder=\"Expense Amount\"\r\n                  type=\"number\"\r\n                />\r\n              </Col>\r\n              <Col xs={12}>\r\n                <CustomDatePicker\r\n                  size=\"large\"\r\n                  label=\"Date\"\r\n                  placeholder=\"Date\"\r\n                  name=\"date\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Form.Item>\r\n              <Upload onChange={handleFileChange} multiple fileList={fileList}>\r\n                <Button>\r\n                  <Icon type=\"upload\" /> Attachments\r\n                </Button>\r\n              </Upload>\r\n            </Form.Item>\r\n            <Row type=\"flex\" gutter={16}>\r\n              <Col xs={12}>\r\n                <CustomSelect\r\n                  label=\"Project\"\r\n                  size=\"large\"\r\n                  placeholder=\"Select a Project\"\r\n                  name=\"project\"\r\n                  options={projectsData}\r\n                />\r\n              </Col>\r\n              <Col xs={12}>\r\n                <CustomSelect\r\n                  label=\"Member\"\r\n                  size=\"large\"\r\n                  placeholder=\"Select a Member\"\r\n                  name=\"user\"\r\n                  options={usersData}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Form.Item>\r\n              <ActionButton type=\"primary\" htmlType=\"submit\">\r\n                Create Expense\r\n              </ActionButton>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nconst ActionButton = styled(Button)`\r\n  margin-right: 16px;\r\n`;\r\n\r\nexport default AddExpense;\r\n","import React from \"react\";\r\nimport { Cell, Pie, PieChart, ResponsiveContainer } from \"recharts\";\r\n\r\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\r\n\r\nconst RADIAN = Math.PI / 180;\r\nconst renderCustomizedLabel = (props: any) => {\r\n  const { cx, cy, midAngle, innerRadius, outerRadius, percent } = props;\r\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n  return (\r\n    <text\r\n      x={x}\r\n      y={y}\r\n      fill=\"white\"\r\n      textAnchor={x > cx ? \"start\" : \"end\"}\r\n      dominantBaseline=\"central\"\r\n    >\r\n      {`${(percent * 100).toFixed(0)}%`}\r\n    </text>\r\n  );\r\n};\r\n\r\nconst ExpenseChart = (props: any) => {\r\n  const { expenseStatsData } = props;\r\n  if (!expenseStatsData) return null;\r\n\r\n  expenseStatsData.map((expenseStat: any, index: number) => {\r\n    expenseStat.name = expenseStat.category;\r\n    return expenseStat;\r\n  });\r\n\r\n  const data = expenseStatsData.filter(\r\n    (expenseStat: any) => expenseStat.percentage !== 0\r\n  );\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={200}>\r\n      <PieChart>\r\n        <Pie\r\n          data={data}\r\n          labelLine={false}\r\n          label={renderCustomizedLabel}\r\n          outerRadius={100}\r\n          fill=\"#8884d8\"\r\n          dataKey=\"percentage\"\r\n        >\r\n          {data.map((entry: any, index: number) => (\r\n            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n          ))}\r\n        </Pie>\r\n      </PieChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default ExpenseChart;\r\n","import { Button, Card, Col, Dropdown, Menu, Modal, Row, Table } from \"antd\";\r\nimport moment from \"moment\";\r\nimport React, { useState } from \"react\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  GET_EXPENSES,\r\n  GET_EXPENSE_STATS\r\n} from \"../../../graphql/expenses/getExpenses\";\r\nimport AddExpense from \"./addExpenses\";\r\nimport ExpenseChart from \"./expenseChart\";\r\n\r\nconst menu = (\r\n  <Menu>\r\n    <Menu.Item>Delete</Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Expense\",\r\n    dataIndex: \"category\",\r\n    render: (text: any, record: any) => {\r\n      return (\r\n        <ExpenseDetail>\r\n          <p>{text}</p>\r\n          <span>{record.details}</span>\r\n        </ExpenseDetail>\r\n      );\r\n    }\r\n  },\r\n  {\r\n    title: \"Project\",\r\n    dataIndex: \"projectName\"\r\n  },\r\n  {\r\n    title: \"Member\",\r\n    dataIndex: \"userEmail\"\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    dataIndex: \"date\"\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    dataIndex: \"amount\"\r\n  }\r\n];\r\n\r\nconst pieChartColumns = [\r\n  {\r\n    title: \"category\",\r\n    dataIndex: \"category\"\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    dataIndex: \"total\"\r\n  },\r\n  {\r\n    title: \"Percentage\",\r\n    dataIndex: \"percentage\"\r\n  }\r\n];\r\n\r\nconst Expenses = () => {\r\n  const [selectedRowKeys, setSelectedRowKey] = useState([]);\r\n\r\n  const onTableRowSelection = (selKeys: any) => {\r\n    setSelectedRowKey(selKeys);\r\n  };\r\n\r\n  const rowSelection = {\r\n    selectedRowKeys,\r\n    onChange: onTableRowSelection\r\n  };\r\n\r\n  const hasSelected = selectedRowKeys.length > 0;\r\n\r\n  const [createExpenseModalVisible, setCreateExpenseModalVisible] = useState(\r\n    false\r\n  );\r\n\r\n  const getExpenses = useQuery(GET_EXPENSES);\r\n\r\n  const getExpenseStats = useQuery(GET_EXPENSE_STATS);\r\n\r\n  const onChangeExpenseModalState = (state: boolean) => {\r\n    setCreateExpenseModalVisible(state);\r\n  };\r\n\r\n  let expensesData: any = [];\r\n  if (!getExpenses.loading && !getExpenses.error) {\r\n    expensesData = getExpenses.data.getExpenses;\r\n\r\n    expensesData.map((expense: any) => {\r\n      expense.key = expense.id;\r\n      expense.date = moment(expense.date).fromNow();\r\n      expense.projectName = expense.project.name;\r\n      expense.userEmail = expense.user.email;\r\n      return expense;\r\n    });\r\n  }\r\n\r\n  const expenseStatsData = !getExpenseStats.loading\r\n    ? getExpenseStats.data.getGroupedExpensesStat.categoryStat\r\n    : null;\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        title={\r\n          <StyledCardTitle>\r\n            <h1>Expenses</h1>\r\n            <Button\r\n              type=\"primary\"\r\n              icon=\"plus\"\r\n              size=\"large\"\r\n              onClick={() => onChangeExpenseModalState(true)}\r\n            >\r\n              Add Expense\r\n            </Button>\r\n          </StyledCardTitle>\r\n        }\r\n      >\r\n        <Row>\r\n          <Col sm={12}>\r\n            <ExpenseChart expenseStatsData={expenseStatsData} />\r\n          </Col>\r\n          <Col sm={12}>\r\n            <Table\r\n              columns={pieChartColumns}\r\n              dataSource={expenseStatsData}\r\n              pagination={false}\r\n              size=\"small\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <StyledAboveTable>\r\n          <Dropdown\r\n            overlay={menu}\r\n            placement=\"bottomCenter\"\r\n            disabled={!hasSelected}\r\n          >\r\n            <Button type=\"dashed\">Bulk Actions</Button>\r\n          </Dropdown>\r\n          <span style={{ marginLeft: 8 }}>\r\n            {hasSelected ? `Selected ${selectedRowKeys.length} items` : \"\"}\r\n          </span>\r\n        </StyledAboveTable>\r\n        <Table\r\n          rowSelection={rowSelection}\r\n          columns={columns}\r\n          dataSource={expensesData}\r\n        />\r\n      </Card>\r\n\r\n      <Modal\r\n        title=\"Add a new Expense\"\r\n        style={{ top: 20 }}\r\n        visible={createExpenseModalVisible}\r\n        footer={null}\r\n        onOk={() => onChangeExpenseModalState(false)}\r\n        onCancel={() => onChangeExpenseModalState(false)}\r\n      >\r\n        <AddExpense\r\n          onChangeExpenseModalState={onChangeExpenseModalState}\r\n          refetchExpenses={getExpenses.refetch}\r\n          refetchExpensesStats={getExpenseStats.refetch}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StyledCardTitle = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  h1 {\r\n    padding: 8px 0;\r\n  }\r\n`;\r\n\r\nconst StyledAboveTable = styled.div`\r\n  margin: 24px 0;\r\n`;\r\n\r\nconst ExpenseDetail = styled.div`\r\n  span {\r\n    font-size: 11px;\r\n    color: #777;\r\n  }\r\n  p {\r\n    margin: 4px 0;\r\n  }\r\n`;\r\n\r\nexport default Expenses;\r\n","import { Checkbox, DatePicker, Form, Select } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst CreateInvoice = () => {\r\n  const projects: any[] = [];\r\n  for (let i = 10; i < 36; i++) {\r\n    projects.push(\r\n      <Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>\r\n    );\r\n  }\r\n\r\n  function onChange(date: any, dateString: any) {\r\n    //\r\n  }\r\n  function handleChange(value: any) {\r\n    //\r\n  }\r\n\r\n  function onSelectChange(value: any) {\r\n    //\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Form layout=\"vertical\">\r\n        <Form.Item label=\"Client\">\r\n          <Select\r\n            showSearch\r\n            size=\"large\"\r\n            placeholder=\"Select a Client\"\r\n            optionFilterProp=\"children\"\r\n            onChange={onSelectChange}\r\n            filterOption={(input, option: any) =>\r\n              option.props.children\r\n                .toLowerCase()\r\n                .indexOf(input.toLowerCase()) >= 0\r\n            }\r\n          >\r\n            <Option value=\"client1\">Client 1</Option>\r\n            <Option value=\"client2\">Client 2</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Projects\">\r\n          <Select\r\n            mode=\"multiple\"\r\n            size=\"large\"\r\n            style={{ width: \"100%\" }}\r\n            placeholder=\"Select Projects\"\r\n            defaultValue={[]}\r\n            onChange={handleChange}\r\n          >\r\n            {projects}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Period (optional)\">\r\n          <RangePicker size=\"large\" onChange={onChange} />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Checkbox onChange={handleChange}>Include Expenses</Checkbox>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateInvoice;\r\n","import React from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\n\r\nconst data = [\r\n  { name: \"Jan, 2019\", amount: 2400 },\r\n  { name: \"Feb, 2019\", amount: 1398 },\r\n  { name: \"Mar, 2019\", amount: 9800 },\r\n  { name: \"Apr, 2019\", amount: 3908 },\r\n  { name: \"May, 2019\", amount: 4800 },\r\n  { name: \"Jun, 2019\", amount: 3800 },\r\n  { name: \"Jul, 2019\", amount: 4300 },\r\n  { name: \"Aug, 2019\", amount: 100 },\r\n  { name: \"Sep, 2019\", amount: 4500 },\r\n  { name: \"Oct, 2019\", amount: 1200 },\r\n  { name: \"Nov, 2019\", amount: 200 },\r\n  { name: \"Dec, 2019\", amount: 3400 }\r\n];\r\n\r\nconst InvoiceChart = () => {\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={300}>\r\n      <BarChart\r\n        data={data}\r\n        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"0 0\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"amount\" stackId=\"a\" fill=\"#30336b\" />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default InvoiceChart;\r\n","import { Button, Card, Dropdown, Menu, Modal, Row, Table } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport CreateInvoice from \"./createInvoice\";\r\nimport InvoiceChart from \"./invoiceChart\";\r\n\r\nconst menu = (\r\n  <Menu>\r\n    <Menu.Item>Delete</Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Client\",\r\n    dataIndex: \"client\"\r\n  },\r\n  {\r\n    title: \"Period\",\r\n    dataIndex: \"period\"\r\n  },\r\n  {\r\n    title: \"Duration\",\r\n    dataIndex: \"duration\"\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    dataIndex: \"amount\"\r\n  },\r\n  {\r\n    title: \"Issue Date\",\r\n    dataIndex: \"issueDate\"\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: \"status\"\r\n  }\r\n];\r\n\r\nconst data = [\r\n  {\r\n    key: \"1\",\r\n    client: \"The Moisture Factory\",\r\n    period: \"May 1 to Dec 12\",\r\n    duration: \"23h 45m\",\r\n    amount: 6780,\r\n    issueDate: \"Dec 12\",\r\n    status: \"draft\"\r\n  },\r\n  {\r\n    key: \"2\",\r\n    client: \"Brian Van Rooyen\",\r\n    period: \"May 12 to Sep 12\",\r\n    duration: \"45h 12m\",\r\n    amount: 12300,\r\n    issueDate: \"Sep 12\",\r\n    status: \"paid\"\r\n  }\r\n];\r\n\r\nconst Invoices = () => {\r\n  /**\r\n   * Table Rows Selection\r\n   */\r\n  const [selectedRowKeys, setSelectedRowKey] = useState([]);\r\n\r\n  const onTableRowSelection = (selKeys: any) => {\r\n    setSelectedRowKey(selKeys);\r\n  };\r\n\r\n  const rowSelection = {\r\n    selectedRowKeys,\r\n    onChange: onTableRowSelection\r\n  };\r\n\r\n  const hasSelected = selectedRowKeys.length > 0;\r\n\r\n  /**\r\n   * Create Invoice Modal\r\n   */\r\n\r\n  const [createInvoiceModalVisible, setCreateInvoiceModalVisible] = useState(\r\n    false\r\n  );\r\n\r\n  const onChangeInvoiceModalState = (state: boolean) => {\r\n    setCreateInvoiceModalVisible(state);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        title={\r\n          <StyledCardTitle>\r\n            <h1>Invoices</h1>\r\n            <Button\r\n              type=\"primary\"\r\n              icon=\"plus\"\r\n              size=\"large\"\r\n              onClick={() => onChangeInvoiceModalState(true)}\r\n            >\r\n              Create Invoice\r\n            </Button>\r\n          </StyledCardTitle>\r\n        }\r\n      >\r\n        <Row>\r\n          <InvoiceChart />\r\n        </Row>\r\n        <div\r\n          style={{\r\n            padding: \"48px 16px\",\r\n            borderRadius: 8\r\n          }}\r\n        >\r\n          <StyledAboveTable>\r\n            <Dropdown\r\n              overlay={menu}\r\n              placement=\"bottomCenter\"\r\n              disabled={!hasSelected}\r\n            >\r\n              <Button type=\"dashed\">Bulk Actions</Button>\r\n            </Dropdown>\r\n            <span style={{ marginLeft: 8 }}>\r\n              {hasSelected ? `Selected ${selectedRowKeys.length} items` : \"\"}\r\n            </span>\r\n          </StyledAboveTable>\r\n          <Table\r\n            rowSelection={rowSelection}\r\n            columns={columns}\r\n            dataSource={data}\r\n          />\r\n        </div>\r\n      </Card>\r\n\r\n      <Modal\r\n        title=\"Create Invoice\"\r\n        style={{ top: 20 }}\r\n        visible={createInvoiceModalVisible}\r\n        onOk={() => onChangeInvoiceModalState(false)}\r\n        onCancel={() => onChangeInvoiceModalState(false)}\r\n      >\r\n        <CreateInvoice />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StyledCardTitle = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  h1 {\r\n    padding: 8px 0;\r\n  }\r\n`;\r\n\r\nconst StyledAboveTable = styled.div`\r\n  margin: 24px 0;\r\n`;\r\n\r\nexport default Invoices;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const CREATE_PROJECT = gql`\r\n  mutation CreateProject($name: String!, $clientId: ID!, $users: [ID!]!) {\r\n    createProject(name: $name, clientId: $clientId, users: $users) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button, Divider, Form } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  CustomMultipleSelect,\r\n  CustomSelect,\r\n  CustomTextInput\r\n} from \"../../../components/fields/formFields\";\r\nimport { GET_CLIENTS } from \"../../../graphql/client/getClients\";\r\nimport { CREATE_PROJECT } from \"../../../graphql/project/createProject\";\r\nimport { GET_WORKSPACE_USERS } from \"../../../graphql/user/getWorkspaceUsers\";\r\n\r\nconst createProjectSchema = Yup.object().shape({\r\n  name: Yup.string().required(\"Name is Required\"),\r\n  client: Yup.string().required(\"Client is Required\"),\r\n  members: Yup.array().required(\"Atleast one Member is Required\")\r\n});\r\n\r\nconst CreateProject = (props: any) => {\r\n  const { setCreateProjectModalVisible, refetchProjects } = props;\r\n\r\n  const getClients = useQuery(GET_CLIENTS);\r\n  const getUsers = useQuery(GET_WORKSPACE_USERS);\r\n\r\n  const createProject = useMutation(CREATE_PROJECT);\r\n\r\n  const handleCreateProject = async (values: any, { resetForm }: any) => {\r\n    const { name, client, members } = values;\r\n\r\n    const created = await createProject({\r\n      variables: {\r\n        name,\r\n        clientId: client,\r\n        users: members\r\n      }\r\n    });\r\n\r\n    if (created.data.createProject.success) {\r\n      resetForm();\r\n      setCreateProjectModalVisible(false);\r\n      refetchProjects();\r\n    }\r\n  };\r\n  let clientsData: any[] = [];\r\n  if (!getClients.loading && !getClients.error) {\r\n    const clients = getClients.data.getClients;\r\n    clientsData = clients.map((client: any) => {\r\n      client.key = client.id;\r\n      client.value = client.id;\r\n      client.text = client.name;\r\n      return client;\r\n    });\r\n  }\r\n\r\n  let usersData: any[] = [];\r\n  if (!getUsers.loading && !getUsers.error) {\r\n    const users = getUsers.data.getWorkshopUsers;\r\n    usersData = users.map((user: any) => {\r\n      user.key = user.id;\r\n      user.value = user.id;\r\n      user.text = user.email;\r\n      return user;\r\n    });\r\n  }\r\n\r\n  if (clientsData.length === 0) {\r\n    return <p>You must add client first.</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{}}\r\n        validationSchema={createProjectSchema}\r\n        onSubmit={handleCreateProject}\r\n        render={(props: any) => (\r\n          <Form layout=\"vertical\" onSubmit={props.handleSubmit}>\r\n            <CustomTextInput\r\n              label=\"Project Name\"\r\n              size=\"large\"\r\n              placeholder=\"Name of project\"\r\n              name=\"name\"\r\n            />\r\n\r\n            <CustomSelect\r\n              label=\"Select a Client\"\r\n              size=\"large\"\r\n              placeholder=\"Select a Client\"\r\n              name=\"client\"\r\n              options={clientsData}\r\n            />\r\n\r\n            <CustomMultipleSelect\r\n              label=\"Select Members\"\r\n              size=\"large\"\r\n              placeholder=\"Select Members\"\r\n              name=\"members\"\r\n              options={usersData}\r\n            />\r\n            <Divider />\r\n\r\n            <Form.Item>\r\n              <ActionButton type=\"primary\" htmlType=\"submit\">\r\n                Create Project\r\n              </ActionButton>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst ActionButton = styled(Button)`\r\n  margin-right: 16px;\r\n`;\r\n\r\nexport default CreateProject;\r\n","import { Button, Card, Dropdown, Menu, Modal, Table } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { GET_PROJECTS } from \"../../../graphql/project/getProjects\";\r\nimport CreateProject from \"./createProject\";\r\n\r\nconst menu = (\r\n  <Menu>\r\n    <Menu.Item>Archive</Menu.Item>\r\n    <Menu.Item>Unarchive</Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    render: (text: string, data: any) => {\r\n      return <NavLink to={`/dashboard/projects/${data.slug}`}>{text}</NavLink>;\r\n    }\r\n  }\r\n];\r\n\r\nconst Projects = () => {\r\n  const { data, error, loading, refetch } = useQuery(GET_PROJECTS);\r\n\r\n  /**\r\n   * Table Rows Selection\r\n   */\r\n  const [selectedRowKeys, setSelectedRowKey] = useState([]);\r\n\r\n  const onTableRowSelection = (selKeys: any) => {\r\n    setSelectedRowKey(selKeys);\r\n  };\r\n\r\n  const rowSelection = {\r\n    selectedRowKeys,\r\n    onChange: onTableRowSelection\r\n  };\r\n\r\n  const hasSelected = selectedRowKeys.length > 0;\r\n\r\n  /**\r\n   * Create Project Modal\r\n   */\r\n\r\n  const [createProjectModalVisible, setCreateProjectModalVisible] = useState(\r\n    false\r\n  );\r\n\r\n  const onChangeProjectModalState = (state: boolean) => {\r\n    setCreateProjectModalVisible(state);\r\n  };\r\n\r\n  if (loading) return null;\r\n  if (!!error) {\r\n    return <div>Error loading client..</div>;\r\n  }\r\n\r\n  const projects = data.getProjects.results;\r\n  projects.map((project: any) => {\r\n    project.key = project.id;\r\n    return project;\r\n  });\r\n\r\n  // TODO: create entry point for creating project. If no projects exist.\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title={\r\n          <>\r\n            <StyledCardTitle>\r\n              <h1>Projects</h1>\r\n              <Button\r\n                type=\"primary\"\r\n                icon=\"plus\"\r\n                size=\"large\"\r\n                onClick={() => onChangeProjectModalState(true)}\r\n              >\r\n                Create Project\r\n              </Button>\r\n            </StyledCardTitle>\r\n          </>\r\n        }\r\n      >\r\n        <StyledAboveTable>\r\n          <Dropdown\r\n            overlay={menu}\r\n            placement=\"bottomCenter\"\r\n            disabled={!hasSelected}\r\n          >\r\n            <Button type=\"dashed\">Bulk Actions</Button>\r\n          </Dropdown>\r\n          <span style={{ marginLeft: 8 }}>\r\n            {hasSelected ? `Selected ${selectedRowKeys.length} items` : \"\"}\r\n          </span>\r\n        </StyledAboveTable>\r\n        <Table\r\n          rowSelection={rowSelection}\r\n          columns={columns}\r\n          dataSource={projects}\r\n        />\r\n      </Card>\r\n      <Modal\r\n        title=\"Create Project\"\r\n        visible={createProjectModalVisible}\r\n        footer={null}\r\n        onOk={() => onChangeProjectModalState(false)}\r\n        onCancel={() => onChangeProjectModalState(false)}\r\n      >\r\n        <CreateProject\r\n          setCreateProjectModalVisible={setCreateProjectModalVisible}\r\n          refetchProjects={refetch}\r\n        />\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nconst StyledCardTitle = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  h1 {\r\n    padding: 8px 0;\r\n  }\r\n`;\r\n\r\nconst StyledAboveTable = styled.div`\r\n  margin: 24px 0;\r\n`;\r\n\r\nexport default Projects;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_PROJECT_BY_SLUG = gql`\r\n  query GetProjectBySlug($slug: String!) {\r\n    getProjectBySlug(slug: $slug) {\r\n      success\r\n      message\r\n      result {\r\n        id\r\n        name\r\n        sections {\r\n          id\r\n          name\r\n          tasks {\r\n            id\r\n            name\r\n            description\r\n            dueAt\r\n            createdAt\r\n            timerRecords {\r\n              duration\r\n              user {\r\n                email\r\n              }\r\n            }\r\n            estimate {\r\n              total\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_PROJECT = gql`\r\n  query GetProject($id: ID!) {\r\n    getProject(id: $id) {\r\n      success\r\n      result {\r\n        id\r\n        name\r\n        billing {\r\n          id\r\n        }\r\n        budget {\r\n          id\r\n        }\r\n        users {\r\n          id\r\n          email\r\n        }\r\n        client {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const CREATE_SECTION = gql`\r\n  mutation CreateSection($projectId: ID!, $name: String!) {\r\n    createSection(projectId: $projectId, name: $name) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const CREATE_TASK = gql`\r\n  mutation CreateTask($sectionId: ID!, $name: String!) {\r\n    createTask(sectionId: $sectionId, name: $name) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const REORDER_TASK = gql`\r\n  mutation ReorderTask($sectionId: ID!, $from: Int!, $to: Int!) {\r\n    reorderTask(sectionId: $sectionId, from: $from, to: $to)\r\n  }\r\n`;\r\n\r\nexport const REORDER_TASK_BETWEEN_SECTIONS = gql`\r\n  mutation ReorderTaskBetweenSections(\r\n    $sourceSectionId: ID!\r\n    $destinationSectionId: ID!\r\n    $from: Int!\r\n    $to: Int!\r\n  ) {\r\n    reorderTaskBetweenSections(\r\n      sourceSectionId: $sourceSectionId\r\n      destinationSectionId: $destinationSectionId\r\n      from: $from\r\n      to: $to\r\n    )\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const DELETE_SECTION = gql`\r\n  mutation DeleteSection($id: ID!) {\r\n    deleteSection(id: $id)\r\n  }\r\n`;\r\n","const reorderArray: any = (list: any, startIndex: number, endIndex: number) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n  return result;\r\n};\r\n\r\nconst dragItemsBetweenArray: any = (\r\n  source: any,\r\n  destination: any,\r\n  droppableSource: any,\r\n  droppableDestination: any\r\n) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result: any = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst groupedTimerRecords: any = (data: any) => {\r\n  const groups = data.reduce((groups: any, rec: any) => {\r\n    const date = rec.date.split(\"T\")[0];\r\n    if (!groups[date]) {\r\n      groups[date] = [];\r\n    }\r\n    groups[date].push(rec);\r\n    return groups;\r\n  }, {});\r\n\r\n  const groupArrays = Object.keys(groups).map(date => {\r\n    const groupByTask = groups[date].reduce((groups: any, rec: any) => {\r\n      const taskId = rec.task.id;\r\n      if (!groups[taskId]) {\r\n        groups[taskId] = [];\r\n      }\r\n      groups[taskId].push(rec);\r\n      return groups;\r\n    }, {});\r\n\r\n    const groupTaskArray = Object.keys(groupByTask).map(task => {\r\n      const totalDuration = groupByTask[task].reduce(\r\n        (sum: any, dur: any) => parseInt(dur.duration) + sum,\r\n        0\r\n      );\r\n      return {\r\n        task: groupByTask[task][0].task.name,\r\n        totalDuration,\r\n        taskRecords: groupByTask[task]\r\n      };\r\n    });\r\n\r\n    return {\r\n      date,\r\n      dateRecords: groupTaskArray\r\n    };\r\n  });\r\n\r\n  return groupArrays;\r\n};\r\n\r\nconst getTaskRecordsTotalHour = (task: any) => {\r\n  if (!task.timerRecords) return 0;\r\n  const total = task.timerRecords.reduce(\r\n    (sum: number, tr: any) => sum + parseInt(tr.duration),\r\n    0\r\n  );\r\n  return Math.floor(total / 3600);\r\n};\r\n\r\nexport {\r\n  reorderArray,\r\n  dragItemsBetweenArray,\r\n  groupedTimerRecords,\r\n  getTaskRecordsTotalHour\r\n};\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_PROJECT_BILLING = gql`\r\n  query GetProjectBilling($id: ID!) {\r\n    getProjectBilling(id: $id) {\r\n      success\r\n      result {\r\n        id\r\n        rate\r\n        type\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_PROJECT_BUDGET = gql`\r\n  query GetProjectBudget($id: ID!) {\r\n    getProjectBudget(id: $id) {\r\n      success\r\n      result {\r\n        id\r\n        amount\r\n        type\r\n        progress\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const SET_PROJECT_BILLING = gql`\r\n  mutation SetProjectBilling($id: ID!, $rate: Int!, $type: String!) {\r\n    setProjectBilling(id: $id, rate: $rate, type: $type) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button, Form, Icon, Popover } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport { ProjectContext } from \".\";\r\nimport {\r\n  CustomSelect,\r\n  CustomTextInput\r\n} from \"../../../../components/fields/formFields\";\r\nimport { GET_PROJECT_BILLING } from \"../../../../graphql/project/getProjectBilling\";\r\nimport { GET_PROJECT_BUDGET } from \"../../../../graphql/project/getProjectBudget\";\r\nimport { SET_PROJECT_BILLING } from \"../../../../graphql/project/setProjectBilling\";\r\n\r\nconst typeOptions = [\r\n  {\r\n    key: 1,\r\n    value: \"flat_rate\",\r\n    text: \"Project Rate\"\r\n  },\r\n  {\r\n    key: 2,\r\n    value: \"user_rate\",\r\n    text: \"User Rate\"\r\n  }\r\n];\r\n\r\nconst BillingView = (props: any) => {\r\n  const { project } = useContext(ProjectContext);\r\n\r\n  const getBilling = useQuery(GET_PROJECT_BILLING, {\r\n    variables: {\r\n      id: project.id\r\n    }\r\n  });\r\n\r\n  const getBudget = useQuery(GET_PROJECT_BUDGET, {\r\n    variables: {\r\n      id: project.id\r\n    }\r\n  });\r\n\r\n  // Billing Edit Area\r\n  const [showEditBilling, setShowEditBilling] = useState(false);\r\n\r\n  const setBilling = useMutation(SET_PROJECT_BILLING);\r\n  const handleUpdateBilling = async (values: any) => {\r\n    const { rate, type } = values;\r\n\r\n    const updated = await setBilling({\r\n      variables: {\r\n        id: project.id,\r\n        rate,\r\n        type\r\n      }\r\n    });\r\n\r\n    if (updated.data.setProjectBilling.success) {\r\n      getBilling.refetch();\r\n      getBudget.refetch();\r\n      setShowEditBilling(false);\r\n    }\r\n  };\r\n  let billingFormData = {\r\n    rate: 0,\r\n    type: \"flat_rate\"\r\n  };\r\n  let billingType = \"h\";\r\n  let rate = 0;\r\n\r\n  if (getBilling.loading) return null;\r\n  if (getBilling.data.getProjectBilling.success) {\r\n    const billing = getBilling.data.getProjectBilling.result;\r\n    billingFormData = {\r\n      rate: billing.rate,\r\n      type: billing.type\r\n    };\r\n\r\n    billingType =\r\n      billing.type === \"flat_rate\" ? \"per project hour\" : \"per user hour\";\r\n    rate = billing.rate;\r\n  }\r\n\r\n  return (\r\n    <Popover\r\n      className=\"billing-section\"\r\n      content={\r\n        <Formik\r\n          initialValues={billingFormData}\r\n          onSubmit={handleUpdateBilling}\r\n          render={(props: any) => (\r\n            <Form onSubmit={props.handleSubmit}>\r\n              <CombinedInputs>\r\n                <CustomTextInput\r\n                  className=\"rate-field\"\r\n                  name=\"rate\"\r\n                  type=\"number\"\r\n                />\r\n                <CustomSelect\r\n                  className=\"type-field\"\r\n                  name=\"type\"\r\n                  options={typeOptions}\r\n                  disabled\r\n                />\r\n              </CombinedInputs>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Save Billing\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        />\r\n      }\r\n      title={null}\r\n      trigger=\"click\"\r\n      visible={showEditBilling}\r\n      placement=\"leftTop\"\r\n      onVisibleChange={(visible: boolean) => setShowEditBilling(visible)}\r\n    >\r\n      {getBilling.data.getProjectBilling.success ? (\r\n        <div>\r\n          <p>Billing</p>\r\n          <p>{`${rate}$ ${billingType}`}</p>\r\n        </div>\r\n      ) : (\r\n        <a className=\"ant-dropdown-link\" href=\"#\">\r\n          Billing <Icon type=\"caret\" />\r\n        </a>\r\n      )}\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst CombinedInputs = styled.div`\r\n  display: flex;\r\n  .type-field {\r\n    width: 130px !important;\r\n    margin-left: -4px;\r\n    border-radius: 0;\r\n  }\r\n  .rate-field {\r\n    width: 130px !important;\r\n  }\r\n`;\r\n\r\nexport default BillingView;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const SET_PROJECT_BUDGET = gql`\r\n  mutation SetProjectBudget($id: ID!, $amount: Int!, $type: String!) {\r\n    setProjectBudget(id: $id, amount: $amount, type: $type) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button, Form, Icon, Popover, Progress } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport { ProjectContext } from \".\";\r\nimport {\r\n  CustomSelect,\r\n  CustomTextInput\r\n} from \"../../../../components/fields/formFields\";\r\nimport { GET_PROJECT_BUDGET } from \"../../../../graphql/project/getProjectBudget\";\r\nimport { SET_PROJECT_BUDGET } from \"../../../../graphql/project/setProjectBudget\";\r\n\r\nconst typeOptions = [\r\n  {\r\n    key: 1,\r\n    value: \"money\",\r\n    text: \"$\"\r\n  },\r\n  {\r\n    key: 2,\r\n    value: \"time\",\r\n    text: \"Hours\"\r\n  }\r\n];\r\n\r\nconst BudgetView = (props: any) => {\r\n  const { project } = useContext(ProjectContext);\r\n\r\n  const getBudget = useQuery(GET_PROJECT_BUDGET, {\r\n    variables: {\r\n      id: project.id\r\n    }\r\n  });\r\n\r\n  // Budget Edit Area\r\n  const [showEditBudget, setShowEditBudget] = useState(false);\r\n\r\n  const setBudget = useMutation(SET_PROJECT_BUDGET);\r\n  const handleUpdateBudget = async (values: any) => {\r\n    const { amount, type } = values;\r\n\r\n    const updated = await setBudget({\r\n      variables: {\r\n        id: project.id,\r\n        amount,\r\n        type\r\n      }\r\n    });\r\n\r\n    if (updated.data.setProjectBudget.success) {\r\n      setShowEditBudget(false);\r\n      getBudget.refetch();\r\n    }\r\n  };\r\n\r\n  if (getBudget.loading) return null;\r\n\r\n  const budget = getBudget.data.getProjectBudget.result;\r\n\r\n  let budgetFormData = {\r\n    amount: 0,\r\n    type: \"time\"\r\n  };\r\n  let budgetType = \"h\";\r\n  let amount: number = 0;\r\n  let progress: number = 0;\r\n  let percentage: number = 0;\r\n\r\n  if (budget) {\r\n    budgetFormData = {\r\n      amount: budget.amount,\r\n      type: budget.type\r\n    };\r\n\r\n    budgetType = budget.type === \"money\" ? \"$\" : \"h\";\r\n    amount = parseInt(budget.amount);\r\n    progress = parseInt(budget.progress);\r\n    percentage = Math.floor((progress / amount) * 100);\r\n  }\r\n\r\n  return (\r\n    <Popover\r\n      className=\"budget-section\"\r\n      content={\r\n        <Formik\r\n          initialValues={budgetFormData}\r\n          onSubmit={handleUpdateBudget}\r\n          render={(props: any) => (\r\n            <Form onSubmit={props.handleSubmit}>\r\n              <CombinedInputs>\r\n                <CustomTextInput\r\n                  className=\"amount-field\"\r\n                  name=\"amount\"\r\n                  type=\"number\"\r\n                />\r\n                <CustomSelect\r\n                  className=\"time-field\"\r\n                  name=\"type\"\r\n                  options={typeOptions}\r\n                />\r\n              </CombinedInputs>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Save Budget\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        />\r\n      }\r\n      title={null}\r\n      trigger=\"click\"\r\n      visible={showEditBudget}\r\n      placement=\"leftTop\"\r\n      onVisibleChange={(visible: boolean) => setShowEditBudget(visible)}\r\n    >\r\n      {getBudget.data.getProjectBudget.success ? (\r\n        <div>\r\n          <p>{`Budget: ${progress}${budgetType} of ${amount}${budgetType}`}</p>\r\n          <div>\r\n            <Progress percent={percentage} strokeColor=\"green\" />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <a className=\"ant-dropdown-link\" href=\"#\">\r\n          Budget <Icon type=\"caret\" />\r\n        </a>\r\n      )}\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst CombinedInputs = styled.div`\r\n  display: flex;\r\n  .time-field {\r\n    width: 100px !important;\r\n    margin-left: -4px;\r\n    border-radius: 0;\r\n  }\r\n  .amount-field {\r\n    width: 100px !important;\r\n  }\r\n`;\r\n\r\nexport default BudgetView;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_TIMER = gql`\r\n  {\r\n    getTimer {\r\n      success\r\n      result {\r\n        id\r\n        startedAt\r\n        task {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport { GET_TIMER } from \"../../../../graphql/timer/getTimer\";\r\n\r\nconst CardTimer = (props: any) => {\r\n  const { task } = props;\r\n  const { data, loading } = useQuery(GET_TIMER);\r\n\r\n  if (loading) return null;\r\n\r\n  if (!data.getTimer.result || task.id !== data.getTimer.result.task.id)\r\n    return null;\r\n\r\n  return <CardTimerInner currentTimer={data.getTimer.result} />;\r\n};\r\n\r\nconst CardTimerInner = (props: any) => {\r\n  const { currentTimer } = props;\r\n  const now = moment();\r\n  const timerStartedAt = currentTimer.startedAt;\r\n  const timerDuration = moment.duration(now.diff(timerStartedAt));\r\n  const [timer, setTimer] = useState(timerDuration);\r\n\r\n  const runningTimer = setInterval(() => {\r\n    const now = moment();\r\n    const timerDuration = moment.duration(now.diff(timerStartedAt));\r\n    setTimer(timerDuration);\r\n  }, 1000);\r\n\r\n  useEffect(() => {\r\n    return function cleanup() {\r\n      clearTimeout(runningTimer);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <StyledBadge>{`${moment\r\n      .utc(timer.asMilliseconds())\r\n      .format(\"HH:mm:ss\")}`}</StyledBadge>\r\n  );\r\n};\r\n\r\nconst StyledBadge = styled.div`\r\n  background: #fff8e1;\r\n  padding: 6px;\r\n  width: 60px;\r\n  border-radius: 8px;\r\n  font-size: 11px;\r\n  margin: 4px 0;\r\n`;\r\n\r\nexport default CardTimer;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const UPDATE_PROJECT = gql`\r\n  mutation UpdateProject(\r\n    $id: ID!\r\n    $name: String!\r\n    $clientId: ID!\r\n    $users: [ID!]!\r\n  ) {\r\n    updateProject(id: $id, name: $name, clientId: $clientId, users: $users) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button, Divider, Form } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useContext } from \"react\";\r\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport { ProjectContext } from \".\";\r\nimport {\r\n  CustomMultipleSelect,\r\n  CustomSelect,\r\n  CustomTextInput\r\n} from \"../../../../components/fields/formFields\";\r\nimport { GET_CLIENTS } from \"../../../../graphql/client/getClients\";\r\nimport { UPDATE_PROJECT } from \"../../../../graphql/project/updateProject\";\r\nimport { GET_WORKSPACE_USERS } from \"../../../../graphql/user/getWorkspaceUsers\";\r\n\r\nconst updateProjectSchema = Yup.object().shape({\r\n  name: Yup.string().required(\"Name is Required\"),\r\n  client: Yup.string().required(\"Client is Required\"),\r\n  members: Yup.array().required(\"Atleast one Member is Required\")\r\n});\r\n\r\nconst EditProject = (props: any) => {\r\n  const { setEditProjectVisible } = props;\r\n  const { project, refetchProject } = useContext(ProjectContext);\r\n\r\n  const getClients = useQuery(GET_CLIENTS);\r\n  const getUsers = useQuery(GET_WORKSPACE_USERS);\r\n\r\n  const updateProject = useMutation(UPDATE_PROJECT);\r\n\r\n  const handleUpdateProject = async (values: any, { resetForm }: any) => {\r\n    const { name, client, members } = values;\r\n\r\n    const updated = await updateProject({\r\n      variables: {\r\n        id: project.id,\r\n        name,\r\n        clientId: client,\r\n        users: members\r\n      }\r\n    });\r\n\r\n    if (updated.data.updateProject.success) {\r\n      resetForm();\r\n      refetchProject();\r\n      setEditProjectVisible(false);\r\n    }\r\n  };\r\n\r\n  let clientsData: any[] = [];\r\n  if (!getClients.loading && !getClients.error) {\r\n    const clients = getClients.data.getClients;\r\n    clientsData = clients.map((client: any) => {\r\n      client.key = client.id;\r\n      client.value = client.id;\r\n      client.text = client.name;\r\n      return client;\r\n    });\r\n  }\r\n\r\n  let usersData: any[] = [];\r\n  if (!getUsers.loading && !getUsers.error) {\r\n    const users = getUsers.data.getWorkshopUsers;\r\n    usersData = users.map((user: any) => {\r\n      user.key = user.id;\r\n      user.value = user.id;\r\n      user.text = user.email;\r\n      return user;\r\n    });\r\n  }\r\n\r\n  if (clientsData.length === 0) {\r\n    return <p>You must add client first.</p>;\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: project.name,\r\n        client: project.client && project.client.id,\r\n        members:\r\n          project.users &&\r\n          project.users.reduce((groups: any, u: any) => {\r\n            groups.push(u.id);\r\n            return groups;\r\n          }, [])\r\n      }}\r\n      validationSchema={updateProjectSchema}\r\n      onSubmit={handleUpdateProject}\r\n      render={(props: any) => (\r\n        <Form layout=\"vertical\" onSubmit={props.handleSubmit}>\r\n          <CustomTextInput\r\n            label=\"Project Name\"\r\n            size=\"large\"\r\n            placeholder=\"Name of project\"\r\n            name=\"name\"\r\n          />\r\n\r\n          <CustomSelect\r\n            label=\"Select a Client\"\r\n            size=\"large\"\r\n            placeholder=\"Select a Client\"\r\n            name=\"client\"\r\n            options={clientsData}\r\n          />\r\n\r\n          <CustomMultipleSelect\r\n            label=\"Select Members\"\r\n            size=\"large\"\r\n            placeholder=\"Select Members\"\r\n            name=\"members\"\r\n            options={usersData}\r\n          />\r\n          <Divider />\r\n\r\n          <Form.Item>\r\n            <ActionButton type=\"primary\" htmlType=\"submit\">\r\n              Update Project\r\n            </ActionButton>\r\n          </Form.Item>\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nconst ActionButton = styled(Button)`\r\n  margin-right: 16px;\r\n`;\r\n\r\nexport default EditProject;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const UPDATE_SECTION = gql`\r\n  mutation UpdateSection($id: ID!, $name: String) {\r\n    updateSection(id: $id, name: $name) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button, Form } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport { CustomTextInput } from \"../../../../components/fields/formFields\";\r\nimport { UPDATE_SECTION } from \"../../../../graphql/section/updateSection\";\r\n\r\nconst EditSectionSchema = Yup.object().shape({\r\n  name: Yup.string().required(\"Name is Required\")\r\n});\r\n\r\nconst EditSection = (props: any) => {\r\n  const { setEditSectionView, refetchProject, section } = props;\r\n  const updateSection = useMutation(UPDATE_SECTION);\r\n\r\n  const { name } = section;\r\n\r\n  const handleUpdate = async (values: any) => {\r\n    const { name } = values;\r\n    await updateSection({\r\n      variables: {\r\n        id: section.id,\r\n        name\r\n      }\r\n    });\r\n    setEditSectionView(false);\r\n    refetchProject();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          name\r\n        }}\r\n        validationSchema={EditSectionSchema}\r\n        onSubmit={handleUpdate}\r\n        render={(props: any) => (\r\n          <Form onSubmit={props.handleSubmit}>\r\n            <CustomTextInput\r\n              placeholder=\"Section name\"\r\n              label=\"Name\"\r\n              name=\"name\"\r\n            />\r\n            <Form.Item>\r\n              <ActionButton type=\"primary\" htmlType=\"submit\">\r\n                Update\r\n              </ActionButton>\r\n              <ActionButton onClick={() => setEditSectionView(false)}>\r\n                Cancel\r\n              </ActionButton>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst ActionButton = styled(Button)`\r\n  margin-right: 16px;\r\n`;\r\n\r\nexport default EditSection;\r\n","import { Card, Dropdown } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ProjectWrapper = styled.section`\r\n  display: flex;\r\n  flex-direction: \"row\";\r\n  overflow-x: \"auto\";\r\n  overflow-y: hidden;\r\n  min-height: 700px;\r\n  ::-webkit-scrollbar {\r\n    height: 0.6em;\r\n    @media (max-width: 500px) {\r\n      height: 0;\r\n      width: 0;\r\n    }\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: darkgrey;\r\n    border-radius: 4px;\r\n    outline: 1px solid slategrey;\r\n  }\r\n`;\r\n\r\nexport const ProjectArea = styled.div`\r\n  padding: 8px;\r\n  margin-right: 16px;\r\n  background: #fcfcfc;\r\n  width: 300px;\r\n`;\r\n\r\nexport const ProjectCard = styled(Card)`\r\n  margin-bottom: 16px;\r\n  border-left: 5px solid #000;\r\n  .ant-card-body {\r\n    padding: 16px 16px 4px 24px;\r\n  }\r\n  .card-meta {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: baseline;\r\n    justify-content: space-between;\r\n    font-size: 0.8em;\r\n    color: #999;\r\n    margin: 8px 0;\r\n  }\r\n`;\r\n\r\nexport const ProjectCards = styled.div`\r\n  width: 300px;\r\n  margin-top: 24px;\r\n  padding-right: 6px;\r\n  min-height: 600px;\r\n`;\r\n\r\nexport const TaskDropdown = styled(Dropdown)`\r\n  margin: 16px 0px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  span {\r\n    margin-right: 24px;\r\n  }\r\n`;\r\n\r\nexport const ProjectAreaEmpty = styled.div`\r\n  padding: 24px 8px;\r\n  margin: 0 16px;\r\n  .add-project-area {\r\n    padding: 80px 0;\r\n  }\r\n`;\r\n\r\nexport const CustomHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  .left-actions {\r\n    display: flex;\r\n  }\r\n\r\n  .right-actions {\r\n    display: flex;\r\n    .billing-section {\r\n      margin-right: 16px;\r\n      cursor: pointer;\r\n      background: #fff;\r\n      border: 1px solid #f1f1f1;\r\n      padding: 4px 16px;\r\n      border-radius: 10px;\r\n    }\r\n    .budget-section {\r\n      cursor: pointer;\r\n      margin-right: 24px;\r\n      background: #fff;\r\n      border: 1px solid #f1f1f1;\r\n      padding: 4px 16px;\r\n      border-radius: 10px;\r\n    }\r\n  }\r\n  h1 {\r\n    margin-right: 16px;\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const ADD_ESTIMATE_TO_TASK = gql`\r\n  mutation AddEstimateToTask($id: ID!, $total: Int!) {\r\n    addEstimateToTask(id: $id, total: $total) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button, Form, Popover } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport moment from \"moment\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport { ProjectContext } from \"..\";\r\nimport { CustomTextInput } from \"../../../../../components/fields/formFields\";\r\nimport { ADD_ESTIMATE_TO_TASK } from \"../../../../../graphql/task/addEstimateToTask\";\r\n\r\nconst addEstimateSchema = Yup.object().shape({\r\n  total: Yup.number().required()\r\n});\r\nconst AddEstimateButton = (props: any) => {\r\n  const [showForms, setShowForms] = useState(false);\r\n  const { currentTask } = props;\r\n  const addEstimate = useMutation(ADD_ESTIMATE_TO_TASK);\r\n\r\n  const { refetchProject } = useContext(ProjectContext);\r\n\r\n  const handleAddEstimate = async (values: any, { resetForm }: any) => {\r\n    const { total } = values;\r\n\r\n    const added = await addEstimate({\r\n      variables: {\r\n        id: currentTask.id,\r\n        total\r\n      }\r\n    });\r\n\r\n    if (added.data.addEstimateToTask.success) {\r\n      resetForm({\r\n        date: moment(),\r\n        duration: \"01:00\",\r\n        description: \"\"\r\n      });\r\n      setShowForms(false);\r\n      refetchProject();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Popover\r\n      visible={showForms}\r\n      content={\r\n        <AddEstimateFormArea>\r\n          <Formik\r\n            initialValues={{\r\n              total: currentTask.estimate ? currentTask.estimate.total : 0\r\n            }}\r\n            validationSchema={addEstimateSchema}\r\n            onSubmit={handleAddEstimate}\r\n            render={(props: any) => (\r\n              <Form onSubmit={props.handleSubmit}>\r\n                <CustomTextInput\r\n                  label=\"Estimate Duration\"\r\n                  placeholder=\"Estimate in Hour\"\r\n                  name=\"total\"\r\n                  type=\"number\"\r\n                  block\r\n                  required\r\n                />\r\n                <Form.Item>\r\n                  <ActionButton type=\"primary\" htmlType=\"submit\">\r\n                    Save\r\n                  </ActionButton>\r\n                  <ActionButton onClick={() => setShowForms(false)}>\r\n                    Cancel\r\n                  </ActionButton>\r\n                </Form.Item>\r\n              </Form>\r\n            )}\r\n          />\r\n        </AddEstimateFormArea>\r\n      }\r\n      title={null}\r\n      placement=\"bottomLeft\"\r\n    >\r\n      <ActionButton block onClick={() => setShowForms(true)}>\r\n        Add Estimate\r\n      </ActionButton>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst ActionButton = styled(Button)`\r\n  margin-right: 16px;\r\n`;\r\n\r\nconst AddEstimateFormArea = styled.div`\r\n  margin: 8px 36px;\r\n`;\r\n\r\nexport default AddEstimateButton;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const ADD_TIME_TO_TASK = gql`\r\n  mutation AddTimeToTask(\r\n    $taskId: ID!\r\n    $duration: String!\r\n    $date: String!\r\n    $description: String\r\n  ) {\r\n    addTimeToTask(\r\n      taskId: $taskId\r\n      duration: $duration\r\n      date: $date\r\n      description: $description\r\n    ) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button, Form, Popover } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport moment from \"moment\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport { ProjectContext } from \"..\";\r\nimport {\r\n  CustomDatePicker,\r\n  CustomTextArea,\r\n  CustomTextInput\r\n} from \"../../../../../components/fields/formFields\";\r\nimport { GET_PROJECT_BUDGET } from \"../../../../../graphql/project/getProjectBudget\";\r\nimport { ADD_TIME_TO_TASK } from \"../../../../../graphql/task/addTimeToTask\";\r\nconst addTimeSchema = Yup.object().shape({\r\n  date: Yup.string().required(\"Name is Required\"),\r\n  duration: Yup.string().matches(\r\n    /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/,\r\n    \"Not a duration format\"\r\n  )\r\n});\r\nconst AddTimeButton = (props: any) => {\r\n  const [showForms, setShowForms] = useState(false);\r\n  const { currentTask } = props;\r\n  const addTime = useMutation(ADD_TIME_TO_TASK);\r\n\r\n  const { project, refetchProject } = useContext(ProjectContext);\r\n\r\n  const getBudget = useQuery(GET_PROJECT_BUDGET, {\r\n    variables: {\r\n      id: project.id\r\n    }\r\n  });\r\n\r\n  const handleAddTime = async (values: any, { resetForm }: any) => {\r\n    const { date, duration, description } = values;\r\n\r\n    const added = await addTime({\r\n      variables: {\r\n        taskId: currentTask.id,\r\n        date,\r\n        duration,\r\n        description\r\n      }\r\n    });\r\n\r\n    if (added.data.addTimeToTask.success) {\r\n      resetForm({\r\n        date: moment(),\r\n        duration: \"01:00\",\r\n        description: \"\"\r\n      });\r\n      setShowForms(false);\r\n      getBudget.refetch();\r\n      refetchProject();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Popover\r\n      visible={showForms}\r\n      content={\r\n        <AddTimeFormArea>\r\n          <Formik\r\n            initialValues={{\r\n              date: moment(),\r\n              duration: \"01:00\",\r\n              description: \"\"\r\n            }}\r\n            validationSchema={addTimeSchema}\r\n            onSubmit={handleAddTime}\r\n            render={(props: any) => (\r\n              <Form onSubmit={props.handleSubmit}>\r\n                <CustomDatePicker\r\n                  label=\"Date\"\r\n                  placeholder=\"Date\"\r\n                  name=\"date\"\r\n                  block\r\n                  required\r\n                />\r\n                <CustomTextInput\r\n                  label=\"Time Duration\"\r\n                  placeholder=\"Time Duration (Hour:Minute)\"\r\n                  name=\"duration\"\r\n                  block\r\n                  required\r\n                />\r\n                <CustomTextArea\r\n                  label=\"comment\"\r\n                  placeholder=\"comment\"\r\n                  name=\"description\"\r\n                  block\r\n                />\r\n                <Form.Item>\r\n                  <ActionButton type=\"primary\" htmlType=\"submit\">\r\n                    Save\r\n                  </ActionButton>\r\n                  <ActionButton onClick={() => setShowForms(false)}>\r\n                    Cancel\r\n                  </ActionButton>\r\n                </Form.Item>\r\n              </Form>\r\n            )}\r\n          />\r\n        </AddTimeFormArea>\r\n      }\r\n      title={null}\r\n      placement=\"bottomLeft\"\r\n    >\r\n      <ActionButton type=\"primary\" block onClick={() => setShowForms(true)}>\r\n        Add Time\r\n      </ActionButton>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst ActionButton = styled(Button)`\r\n  margin-right: 16px;\r\n`;\r\n\r\nconst AddTimeFormArea = styled.div`\r\n  margin: 8px 36px;\r\n`;\r\n\r\nexport default AddTimeButton;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const DELETE_TASK = gql`\r\n  mutation DeleteTask($id: ID!) {\r\n    deleteTask(id: $id)\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const UPDATE_TASK = gql`\r\n  mutation UpdateTask(\r\n    $id: ID!\r\n    $name: String\r\n    $description: String\r\n    $dueAt: String\r\n    $status: String\r\n  ) {\r\n    updateTask(\r\n      id: $id\r\n      name: $name\r\n      description: $description\r\n      dueAt: $dueAt\r\n      status: $status\r\n    ) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button, Divider, Form, Modal } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useContext } from \"react\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport { ProjectContext } from \"..\";\r\nimport {\r\n  CustomDatePicker,\r\n  CustomTextArea,\r\n  CustomTextInput\r\n} from \"../../../../../components/fields/formFields\";\r\nimport { DELETE_TASK } from \"../../../../../graphql/task/deleteTask\";\r\nimport { UPDATE_TASK } from \"../../../../../graphql/task/updateTask\";\r\n\r\nconst EditTaskSchema = Yup.object().shape({\r\n  name: Yup.string().required(\"Name is Required\")\r\n});\r\n\r\nconst EditTask = (props: any) => {\r\n  const { setShowEditTask, currentTask, setTaskModalVisible } = props;\r\n\r\n  const { refetchProject } = useContext(ProjectContext);\r\n\r\n  const updateTask = useMutation(UPDATE_TASK);\r\n  const deleteTask = useMutation(DELETE_TASK);\r\n\r\n  const { name, description, dueAt } = currentTask;\r\n  const confirm = Modal.confirm;\r\n  const handleDeleteTask = async (e: any) => {\r\n    e.preventDefault();\r\n\r\n    confirm({\r\n      title: \"Do you want to delete this section\",\r\n      content:\r\n        \"Deleting the section will also removes all the tasks associated with it.\",\r\n      async onOk() {\r\n        const destroy = await deleteTask({\r\n          variables: {\r\n            id: currentTask.id\r\n          }\r\n        });\r\n\r\n        if (destroy.data.deleteTask) {\r\n          refetchProject();\r\n          setShowEditTask(false);\r\n          setTaskModalVisible(false);\r\n        }\r\n      },\r\n      onCancel() {}\r\n    });\r\n  };\r\n\r\n  const handleUpdate = async (values: any) => {\r\n    const { name, description, dueAt } = values;\r\n    const update = await updateTask({\r\n      variables: {\r\n        id: currentTask.id,\r\n        name,\r\n        description,\r\n        dueAt\r\n      }\r\n    });\r\n\r\n    if (update.data.updateTask.success) {\r\n      setShowEditTask(false);\r\n      refetchProject();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          name,\r\n          description,\r\n          dueAt\r\n        }}\r\n        validationSchema={EditTaskSchema}\r\n        onSubmit={handleUpdate}\r\n        render={(props: any) => (\r\n          <Form onSubmit={props.handleSubmit}>\r\n            <CustomTextInput placeholder=\"Task name\" label=\"Name\" name=\"name\" />\r\n            <CustomTextArea\r\n              rows={4}\r\n              placeholder=\"Task description\"\r\n              label=\"Description\"\r\n              name=\"description\"\r\n            />\r\n            <CustomDatePicker\r\n              placeholder=\"Due Date\"\r\n              label=\"Due Date\"\r\n              name=\"dueAt\"\r\n            />\r\n            <Divider />\r\n            <Form.Item>\r\n              <Actions>\r\n                <div>\r\n                  <ActionButton type=\"primary\" htmlType=\"submit\">\r\n                    Update\r\n                  </ActionButton>\r\n                  <ActionButton onClick={() => setShowEditTask(false)}>\r\n                    Cancel\r\n                  </ActionButton>\r\n                </div>\r\n                <DeleteButton type=\"danger\" onClick={handleDeleteTask}>\r\n                  Delete\r\n                </DeleteButton>\r\n              </Actions>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\nconst ActionButton = styled(Button)`\r\n  margin-right: 16px;\r\n`;\r\n\r\nconst DeleteButton = styled(Button)`\r\n  margin-right: 16px;\r\n`;\r\n\r\nexport default EditTask;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const START_TIMER = gql`\r\n  mutation StartTimer($taskId: ID!) {\r\n    startTimer(taskId: $taskId) {\r\n      success\r\n      message\r\n      result {\r\n        id\r\n        startedAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const STOP_TIMER = gql`\r\n  mutation StopTimer($taskId: ID!) {\r\n    stopTimer(taskId: $taskId) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n","import { Button } from \"antd\";\r\nimport moment from \"moment\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport { ProjectContext } from \"..\";\r\nimport { GET_PROJECT_BUDGET } from \"../../../../../graphql/project/getProjectBudget\";\r\nimport { GET_TIMER } from \"../../../../../graphql/timer/getTimer\";\r\nimport { START_TIMER } from \"../../../../../graphql/timer/startTimer\";\r\nimport { STOP_TIMER } from \"../../../../../graphql/timer/stopTimer\";\r\n\r\nconst TaskTimerButton = (props: any) => {\r\n  const { currentTask } = props;\r\n  // Get current Timer\r\n  const { data, error, loading, refetch } = useQuery(GET_TIMER);\r\n  if (loading || error) return null;\r\n  const isTimerStarted = data.getTimer.result\r\n    ? data.getTimer.result.task.id === currentTask.id\r\n    : false;\r\n  let timerStartedAt = null;\r\n  if (isTimerStarted) {\r\n    timerStartedAt = data.getTimer.result.startedAt;\r\n  }\r\n  return (\r\n    <TaskTimerButtonInner\r\n      currentTask={currentTask}\r\n      isTimerStarted={isTimerStarted}\r\n      timerStartedAt={timerStartedAt}\r\n      refetchTimer={refetch}\r\n    />\r\n  );\r\n};\r\n\r\nconst TaskTimerButtonInner = (props: any) => {\r\n  const { currentTask, isTimerStarted, timerStartedAt, refetchTimer } = props;\r\n  const [timerStarted, setTimerStarted] = useState(isTimerStarted);\r\n  const now = moment();\r\n  const timerDuration = moment.duration(now.diff(timerStartedAt));\r\n\r\n  const [timer, setTimer] = useState(timerDuration);\r\n\r\n  const [starting, setStarting] = useState(false);\r\n  const { project, refetchProject } = useContext(ProjectContext);\r\n\r\n  const getBudget = useQuery(GET_PROJECT_BUDGET, {\r\n    variables: {\r\n      id: project.id\r\n    }\r\n  });\r\n\r\n  // start Timer\r\n  const startTimer = useMutation(START_TIMER);\r\n  const startTaskTimer = async () => {\r\n    setStarting(true);\r\n    const taskId = currentTask.id;\r\n    await startTimer({\r\n      variables: {\r\n        taskId\r\n      }\r\n    });\r\n    setTimerStarted(true);\r\n    refetchTimer();\r\n    setTimeout(() => {\r\n      setStarting(false);\r\n    }, 1200);\r\n  };\r\n\r\n  const stopTimer = useMutation(STOP_TIMER);\r\n  const stopTaskTimer = async () => {\r\n    const taskId = currentTask.id;\r\n    await stopTimer({\r\n      variables: {\r\n        taskId\r\n      }\r\n    });\r\n    setTimerStarted(false);\r\n    refetchTimer();\r\n    getBudget.refetch();\r\n    refetchProject();\r\n  };\r\n\r\n  const runningTimer = setInterval(() => {\r\n    const now = moment();\r\n    const timerDuration = moment.duration(now.diff(timerStartedAt));\r\n    setTimer(timerDuration);\r\n  }, 1000);\r\n\r\n  useEffect(() => {\r\n    return function cleanup() {\r\n      clearTimeout(runningTimer);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {timerStarted ? (\r\n        <ActionButtonStop block onClick={() => stopTaskTimer()}>\r\n          {!starting\r\n            ? `${moment.utc(timer.asMilliseconds()).format(\"HH:mm:ss\")}`\r\n            : \"starting\"}\r\n        </ActionButtonStop>\r\n      ) : (\r\n        <ActionButtonStart\r\n          type=\"primary\"\r\n          block\r\n          onClick={() => startTaskTimer()}\r\n        >\r\n          Start Timer\r\n        </ActionButtonStart>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ActionButtonStart = styled(Button)`\r\n  margin: 8px 0;\r\n`;\r\n\r\nconst ActionButtonStop = styled(Button)`\r\n  margin: 8px 0;\r\n  background: red;\r\n  color: #fff;\r\n  &:hover {\r\n    background: red;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nexport default TaskTimerButton;\r\n","import { Button, Col, Divider, Modal, Row } from \"antd\";\r\nimport moment from \"moment\";\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport AddEstimateButton from \"./addEstimate\";\r\nimport AddTimeButton from \"./addTimeButton\";\r\nimport EditTask from \"./editTask\";\r\nimport TaskTimerButton from \"./taskTimerButton\";\r\n\r\nconst TaskView = (props: any) => {\r\n  // Task Modal\r\n  const { taskModalVisible, currentTask, setTaskModalVisible } = props;\r\n\r\n  // Edit Task\r\n  const [showEditTask, setShowEditTask] = useState(false);\r\n\r\n  if (!currentTask) return null;\r\n\r\n  return (\r\n    <Modal\r\n      title={currentTask.name}\r\n      visible={taskModalVisible}\r\n      onOk={() => setTaskModalVisible(false)}\r\n      onCancel={() => {\r\n        setTaskModalVisible(false);\r\n        setShowEditTask(false);\r\n      }}\r\n      footer={null}\r\n      width={700}\r\n      destroyOnClose\r\n    >\r\n      {showEditTask ? (\r\n        <EditTask\r\n          setShowEditTask={setShowEditTask}\r\n          setTaskModalVisible={setTaskModalVisible}\r\n          currentTask={currentTask}\r\n        />\r\n      ) : (\r\n        <>\r\n          <Row>\r\n            <Col xs={24} sm={20}>\r\n              <p>{currentTask.description || \"No description.\"}</p>\r\n            </Col>\r\n            <Col xs={24} sm={4}>\r\n              <TaskTimerButton currentTask={currentTask} />\r\n              <AddTimeButton currentTask={currentTask} />\r\n              <ActionButton block onClick={() => setShowEditTask(true)}>\r\n                Edit Task\r\n              </ActionButton>\r\n              <AddEstimateButton currentTask={currentTask} />\r\n            </Col>\r\n          </Row>\r\n          <Divider />\r\n          <Row>\r\n            <span>\r\n              Created at {moment(currentTask.createdAt).format(\"LLL\")}\r\n            </span>\r\n          </Row>\r\n        </>\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ActionButton = styled(Button)`\r\n  margin: 8px 0;\r\n`;\r\n\r\nexport default TaskView;\r\n","import {\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  Dropdown,\r\n  Form,\r\n  Icon,\r\n  Menu,\r\n  Modal,\r\n  Tag\r\n} from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport * as Yup from \"yup\";\r\nimport { ProjectContext } from \".\";\r\nimport { CustomTextArea } from \"../../../../components/fields/formFields\";\r\nimport { CREATE_SECTION } from \"../../../../graphql/project/createSection\";\r\nimport { CREATE_TASK } from \"../../../../graphql/project/createTask\";\r\nimport {\r\n  REORDER_TASK,\r\n  REORDER_TASK_BETWEEN_SECTIONS\r\n} from \"../../../../graphql/project/reorderTask\";\r\nimport { DELETE_SECTION } from \"../../../../graphql/section/deleteSection\";\r\nimport {\r\n  dragItemsBetweenArray,\r\n  getTaskRecordsTotalHour,\r\n  reorderArray\r\n} from \"../../../../utils/helpers\";\r\nimport BillingView from \"./billingView\";\r\nimport BudgetView from \"./budgetView\";\r\nimport CardTimer from \"./cardTimer\";\r\nimport EditProject from \"./editProject\";\r\nimport EditSection from \"./editSection\";\r\nimport {\r\n  CustomHeader,\r\n  ProjectArea,\r\n  ProjectAreaEmpty,\r\n  ProjectCard,\r\n  ProjectCards,\r\n  ProjectWrapper,\r\n  TaskDropdown\r\n} from \"./styled\";\r\nimport TaskView from \"./taskView\";\r\n\r\nconst CreateTaskSchema = Yup.object().shape({\r\n  name: Yup.string().required(\"Name is Required\")\r\n});\r\n\r\nconst ProjectView = (props: any) => {\r\n  // Get Project Context\r\n  const { project, refetchProject } = useContext(ProjectContext);\r\n\r\n  const projectTasks = project;\r\n\r\n  // edit section view\r\n  const [editSectionView, setEditSectionView] = useState(false);\r\n\r\n  // Task View Modal\r\n  const [editProjectVisible, setEditProjectVisible] = useState(false);\r\n\r\n  // Task View Modal\r\n  const [taskModalVisible, setTaskModalVisible] = useState(false);\r\n\r\n  // Reorder Tasks API\r\n  const reorderTask = useMutation(REORDER_TASK);\r\n  const reorderTaskBetweenSections = useMutation(REORDER_TASK_BETWEEN_SECTIONS);\r\n\r\n  // Add Task card api\r\n  const createTask = useMutation(CREATE_TASK);\r\n\r\n  // Add section\r\n  const createSection = useMutation(CREATE_SECTION);\r\n\r\n  const [currentTask, setCurrentTask] = useState({\r\n    sectionIndex: 0,\r\n    taskIndex: 0\r\n  });\r\n\r\n  // delete section\r\n  const deleteSection = useMutation(DELETE_SECTION);\r\n\r\n  // Project area create\r\n  const [addProjectAreaButton, setAddProjectAreaButton] = useState(true);\r\n\r\n  const onShowAddProjectArea = () => {\r\n    setAddProjectAreaButton(false);\r\n  };\r\n\r\n  // Project area create\r\n  const [taskCardAddSection, setTaskCardAddSection] = useState(\"\");\r\n\r\n  const onShowAddTaskCard = (id: string) => {\r\n    setTaskCardAddSection(id);\r\n  };\r\n\r\n  // Handle section create\r\n  const handleCreateSection = async (\r\n    values: any,\r\n    { setSubmitting, setStatus, resetForm }: any\r\n  ) => {\r\n    try {\r\n      const { name } = values;\r\n      await createSection({\r\n        variables: {\r\n          projectId: projectTasks.id,\r\n          name\r\n        }\r\n      });\r\n      setAddProjectAreaButton(true);\r\n      resetForm();\r\n      refetchProject();\r\n    } catch (e) {\r\n      setStatus({ success: false });\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // handle create task\r\n  const handleCreateTask = async (\r\n    sectionIndex: number,\r\n    values: any,\r\n    { setSubmitting, setStatus, resetForm }: any\r\n  ) => {\r\n    try {\r\n      const { name } = values;\r\n      const allTasks = JSON.parse(JSON.stringify(projectTasks));\r\n      await createTask({\r\n        variables: {\r\n          sectionId: allTasks.sections[sectionIndex].id,\r\n          name\r\n        }\r\n      });\r\n      resetForm();\r\n      setTaskCardAddSection(\"\");\r\n      refetchProject();\r\n    } catch (e) {\r\n      setStatus({ success: false });\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // handle delete section\r\n  const confirm = Modal.confirm;\r\n  const handleDeleteSection = async (id: String) => {\r\n    confirm({\r\n      title: \"Do you want to delete this section\",\r\n      content:\r\n        \"Deleting the section will also removes all the tasks associated with it.\",\r\n      async onOk() {\r\n        await deleteSection({\r\n          variables: {\r\n            id\r\n          }\r\n        });\r\n        refetchProject();\r\n        Modal.destroyAll();\r\n      },\r\n      onCancel() {\r\n        Modal.destroyAll();\r\n      },\r\n      zIndex: 1000000,\r\n      maskClosable: true\r\n    });\r\n  };\r\n\r\n  // Drag and drop Logic\r\n  const onDragCardEnd = async (result: any) => {\r\n    const { source, destination } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const taskId = source.droppableId.split(\"-\")[1];\r\n      const items = reorderArray(\r\n        projectTasks.sections[taskId].tasks,\r\n        source.index,\r\n        destination.index\r\n      );\r\n      const projectTasksData = projectTasks;\r\n      projectTasksData.sections[taskId].tasks = items;\r\n      await reorderTask({\r\n        variables: {\r\n          sectionId: projectTasks.sections[taskId].id,\r\n          from: source.index,\r\n          to: destination.index\r\n        }\r\n      });\r\n      setTimeout(() => refetchProject(), 1000);\r\n    } else {\r\n      const srcTaskId = source.droppableId.split(\"-\")[1];\r\n      const destTaskId = destination.droppableId.split(\"-\")[1];\r\n      const result = dragItemsBetweenArray(\r\n        projectTasks.sections[srcTaskId].tasks,\r\n        projectTasks.sections[destTaskId].tasks,\r\n        source,\r\n        destination\r\n      );\r\n      const projectTasksData = projectTasks;\r\n      Object.keys(result).map((key: any) => {\r\n        const keyId = key.split(\"-\")[1];\r\n        projectTasksData.sections[keyId].tasks = result[key];\r\n        return result[key];\r\n      });\r\n      await reorderTaskBetweenSections({\r\n        variables: {\r\n          sourceSectionId: projectTasks.sections[srcTaskId].id,\r\n          destinationSectionId: projectTasks.sections[destTaskId].id,\r\n          from: source.index,\r\n          to: destination.index\r\n        }\r\n      });\r\n      setTimeout(() => refetchProject(), 1000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CustomHeader>\r\n        <div className=\"left-actions\">\r\n          <h1>{projectTasks.name}</h1>\r\n          <Dropdown\r\n            overlay={\r\n              <Menu>\r\n                <Menu.Item key=\"0\">\r\n                  <a onClick={() => setEditProjectVisible(true)}>\r\n                    Edit Project\r\n                  </a>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"1\">\r\n                  <a href=\"#\">Delete Project</a>\r\n                </Menu.Item>\r\n              </Menu>\r\n            }\r\n            trigger={[\"click\"]}\r\n          >\r\n            <a className=\"ant-dropdown-link\" href=\"#\">\r\n              <Icon\r\n                type=\"small-dash\"\r\n                style={{ fontSize: 28, fontWeight: 700 }}\r\n              />\r\n            </a>\r\n          </Dropdown>\r\n        </div>\r\n        <div className=\"right-actions\">\r\n          <BillingView />\r\n          <BudgetView />\r\n        </div>\r\n      </CustomHeader>\r\n\r\n      <ProjectWrapper>\r\n        <DragDropContext onDragEnd={res => onDragCardEnd(res)}>\r\n          {projectTasks.sections.map((section: any, sectionIndex: any) => (\r\n            <ProjectArea key={section.id}>\r\n              <TaskDropdown\r\n                overlay={\r\n                  <>\r\n                    {editSectionView ? (\r\n                      <Card>\r\n                        <EditSection\r\n                          setEditSectionView={setEditSectionView}\r\n                          refetchProject={refetchProject}\r\n                          section={section}\r\n                        />\r\n                      </Card>\r\n                    ) : (\r\n                      <Menu>\r\n                        <Menu.Item key=\"0\">\r\n                          <a onClick={() => setEditSectionView(true)}>\r\n                            Rename Section\r\n                          </a>\r\n                        </Menu.Item>\r\n                        <Menu.Item>\r\n                          <a onClick={() => handleDeleteSection(section.id)}>\r\n                            Delete Section\r\n                          </a>\r\n                        </Menu.Item>\r\n                      </Menu>\r\n                    )}\r\n                  </>\r\n                }\r\n                trigger={[\"click\"]}\r\n              >\r\n                <div className=\"ant-dropdown-link\">\r\n                  <span>{section.name}</span>\r\n                  <span>\r\n                    <Tag color=\"magenta\">4</Tag> <Icon type=\"down\" />\r\n                  </span>\r\n                </div>\r\n              </TaskDropdown>\r\n              <p>11h 35m</p>\r\n\r\n              <Droppable droppableId={`droppable-${sectionIndex}`}>\r\n                {provided => (\r\n                  <ProjectCards\r\n                    {...provided.droppableProps}\r\n                    ref={provided.innerRef}\r\n                  >\r\n                    {section.tasks.map((task: any, taskIndex: number) => (\r\n                      <div key={task.id}>\r\n                        <Draggable\r\n                          key={task.id}\r\n                          draggableId={task.id}\r\n                          index={taskIndex}\r\n                        >\r\n                          {provided => (\r\n                            <div\r\n                              {...provided.draggableProps}\r\n                              {...provided.dragHandleProps}\r\n                              ref={provided.innerRef}\r\n                            >\r\n                              <ProjectCard\r\n                                onClick={() => {\r\n                                  setCurrentTask({ sectionIndex, taskIndex });\r\n                                  setTaskModalVisible(true);\r\n                                }}\r\n                              >\r\n                                <p>{task.name}</p>\r\n\r\n                                <div className=\"card-meta\">\r\n                                  <p>\r\n                                    {getTaskRecordsTotalHour(task)}h{\" \"}\r\n                                    {task.estimate\r\n                                      ? `of ${task.estimate.total}h`\r\n                                      : null}\r\n                                  </p>\r\n                                  <CardTimer task={task} />\r\n                                  <div>\r\n                                    <Avatar\r\n                                      size=\"small\"\r\n                                      src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\r\n                                    />\r\n                                    <Avatar\r\n                                      size=\"small\"\r\n                                      style={{\r\n                                        backgroundColor: \"#87d068\"\r\n                                      }}\r\n                                      icon=\"user\"\r\n                                    />\r\n                                  </div>\r\n                                </div>\r\n                              </ProjectCard>\r\n                            </div>\r\n                          )}\r\n                        </Draggable>\r\n                      </div>\r\n                    ))}\r\n\r\n                    {taskCardAddSection === section.id ? (\r\n                      <Formik\r\n                        initialValues={{ name: \"\" }}\r\n                        validationSchema={CreateTaskSchema}\r\n                        onSubmit={(...args) =>\r\n                          handleCreateTask(sectionIndex, ...args)\r\n                        }\r\n                        render={(props: any) => (\r\n                          <Form onSubmit={props.handleSubmit}>\r\n                            <CustomTextArea\r\n                              rows={4}\r\n                              name=\"name\"\r\n                              placeholder=\"Task Name\"\r\n                            />\r\n                            <Form.Item>\r\n                              <Button type=\"primary\" htmlType=\"submit\" block>\r\n                                Add Card\r\n                              </Button>\r\n                            </Form.Item>\r\n                          </Form>\r\n                        )}\r\n                      />\r\n                    ) : (\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        block\r\n                        onClick={() => onShowAddTaskCard(section.id)}\r\n                      >\r\n                        Add Card\r\n                      </Button>\r\n                    )}\r\n                  </ProjectCards>\r\n                )}\r\n              </Droppable>\r\n            </ProjectArea>\r\n          ))}\r\n          <ProjectArea>\r\n            <ProjectCards>\r\n              {addProjectAreaButton ? (\r\n                <ProjectAreaEmpty>\r\n                  <Button\r\n                    className=\"add-project-area\"\r\n                    type=\"dashed\"\r\n                    block\r\n                    onClick={onShowAddProjectArea}\r\n                  >\r\n                    Add Task Section\r\n                  </Button>\r\n                </ProjectAreaEmpty>\r\n              ) : (\r\n                <ProjectAreaEmpty>\r\n                  <Formik\r\n                    initialValues={{ name: \"\" }}\r\n                    validationSchema={CreateTaskSchema}\r\n                    onSubmit={handleCreateSection}\r\n                    render={(props: any) => (\r\n                      <Form onSubmit={props.handleSubmit}>\r\n                        <CustomTextArea\r\n                          rows={4}\r\n                          name=\"name\"\r\n                          placeholder=\"Section Name\"\r\n                        />\r\n                        <Form.Item>\r\n                          <Button type=\"primary\" htmlType=\"submit\" block>\r\n                            Add Section\r\n                          </Button>\r\n                        </Form.Item>\r\n                      </Form>\r\n                    )}\r\n                  />\r\n                </ProjectAreaEmpty>\r\n              )}\r\n            </ProjectCards>\r\n          </ProjectArea>\r\n        </DragDropContext>\r\n        {projectTasks.sections[currentTask.sectionIndex] &&\r\n        projectTasks.sections[currentTask.sectionIndex].tasks[\r\n          currentTask.taskIndex\r\n        ] ? (\r\n          <TaskView\r\n            currentTask={\r\n              projectTasks.sections[currentTask.sectionIndex].tasks[\r\n                currentTask.taskIndex\r\n              ]\r\n            }\r\n            taskModalVisible={taskModalVisible}\r\n            setTaskModalVisible={setTaskModalVisible}\r\n          />\r\n        ) : null}\r\n\r\n        <Modal\r\n          title={\"Edit Project\"}\r\n          visible={editProjectVisible}\r\n          onOk={() => setEditProjectVisible(false)}\r\n          onCancel={() => {\r\n            setEditProjectVisible(false);\r\n          }}\r\n          footer={null}\r\n          width={700}\r\n          destroyOnClose\r\n        >\r\n          <EditProject setEditProjectVisible={setEditProjectVisible} />\r\n        </Modal>\r\n      </ProjectWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectView;\r\n","import React from \"react\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport { GET_PROJECT_BY_SLUG } from \"../../../../graphql/project/getProject\";\r\nimport ProjectView from \"./projectView\";\r\n\r\ninterface ProjectContextTypes {\r\n  project: any;\r\n  refetchProject: any;\r\n}\r\n\r\nexport const ProjectContext = React.createContext<Partial<ProjectContextTypes>>(\r\n  {\r\n    project: {},\r\n    refetchProject: () => {}\r\n  }\r\n);\r\n\r\nconst SingleProject = (props: any) => {\r\n  const slug = props.location.pathname.split(\"/projects/\")[1];\r\n  const fetchProject = useQuery(GET_PROJECT_BY_SLUG, {\r\n    variables: {\r\n      slug\r\n    }\r\n  });\r\n\r\n  if (fetchProject.loading) return null;\r\n  if (fetchProject.error) return <div>{`Error! ${fetchProject.error}`}</div>;\r\n\r\n  const getProject = fetchProject.data.getProjectBySlug;\r\n\r\n  if (!getProject.success) return null;\r\n  return (\r\n    <ProjectContext.Provider\r\n      value={{\r\n        project: getProject.result,\r\n        refetchProject: fetchProject.refetch\r\n      }}\r\n    >\r\n      <ProjectView />\r\n    </ProjectContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SingleProject;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_REPORTS_BY_MEMBER = gql`\r\n  {\r\n    getReportsByMember {\r\n      uid\r\n      name\r\n      totalDuration\r\n      tasks {\r\n        tid\r\n        totalDuration\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { Table } from \"antd\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport { GET_REPORTS_BY_MEMBER } from \"../../../../graphql/reports/getUserReports\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Member Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"80%\"\r\n  },\r\n  {\r\n    title: \"Duration\",\r\n    dataIndex: \"totalDuration\",\r\n    key: \"totalDuration\",\r\n    render: (text: any) => {\r\n      return moment.utc(parseInt(text) * 1000).format(\"HH:mm\");\r\n    }\r\n  }\r\n];\r\n\r\nconst expandedRowRender = (record: any) => {\r\n  const columns = [\r\n    { title: \"Task\", dataIndex: \"task\", key: \"task\", width: \"80%\" },\r\n    {\r\n      title: \"Duration\",\r\n      dataIndex: \"duration\",\r\n      key: \"duration\",\r\n      render: (text: any) => {\r\n        return moment.utc(parseInt(text) * 1000).format(\"HH:mm\");\r\n      }\r\n    }\r\n  ];\r\n\r\n  const data = [];\r\n  for (let task of record.tasks) {\r\n    data.push({\r\n      key: task.tid,\r\n      task: task.name,\r\n      duration: task.totalDuration\r\n    });\r\n  }\r\n  return <Table columns={columns} dataSource={data} pagination={false} />;\r\n};\r\n\r\nconst Summary = () => {\r\n  const getReports = useQuery(GET_REPORTS_BY_MEMBER);\r\n\r\n  if (getReports.loading) return null;\r\n\r\n  const reports = getReports.data.getReportsByMember;\r\n\r\n  reports.map((report: any) => {\r\n    report.key = report.uid;\r\n    return report;\r\n  });\r\n  return (\r\n    <Table\r\n      columns={columns}\r\n      dataSource={reports}\r\n      expandedRowRender={expandedRowRender}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","import { Table } from \"antd\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TimeSheetTitle = styled.div`\r\n  span {\r\n    color: #777;\r\n  }\r\n  p {\r\n    margin-bottom: 2px;\r\n  }\r\n`;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Task\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"30%\"\r\n  },\r\n  {\r\n    title: (\r\n      <TimeSheetTitle>\r\n        <p>Sunday</p>\r\n        <span>June 11</span>\r\n      </TimeSheetTitle>\r\n    ),\r\n    dataIndex: \"sunday\",\r\n    key: \"sunday\",\r\n    width: \"10%\"\r\n  },\r\n  {\r\n    title: (\r\n      <TimeSheetTitle>\r\n        <p>Monday</p>\r\n        <span>June 12</span>\r\n      </TimeSheetTitle>\r\n    ),\r\n    dataIndex: \"monday\",\r\n    key: \"monday\",\r\n    width: \"10%\"\r\n  },\r\n  {\r\n    title: (\r\n      <TimeSheetTitle>\r\n        <p>Tuesday</p>\r\n        <span>June 13</span>\r\n      </TimeSheetTitle>\r\n    ),\r\n    dataIndex: \"tuesday\",\r\n    key: \"tuesday\",\r\n    width: \"10%\"\r\n  },\r\n  {\r\n    title: (\r\n      <TimeSheetTitle>\r\n        <p>Wednesday</p>\r\n        <span>June 14</span>\r\n      </TimeSheetTitle>\r\n    ),\r\n    dataIndex: \"wednesday\",\r\n    key: \"wednesday\",\r\n    width: \"10%\"\r\n  },\r\n  {\r\n    title: (\r\n      <TimeSheetTitle>\r\n        <p>Thursday</p>\r\n        <span>June 15</span>\r\n      </TimeSheetTitle>\r\n    ),\r\n    dataIndex: \"thursday\",\r\n    key: \"thursday\",\r\n    width: \"10%\"\r\n  },\r\n  {\r\n    title: (\r\n      <TimeSheetTitle>\r\n        <p>Friday</p>\r\n        <span>June 16</span>\r\n      </TimeSheetTitle>\r\n    ),\r\n    dataIndex: \"friday\",\r\n    key: \"friday\",\r\n    width: \"10%\"\r\n  },\r\n  {\r\n    title: (\r\n      <TimeSheetTitle>\r\n        <p>Saturday</p>\r\n        <span>June 17</span>\r\n      </TimeSheetTitle>\r\n    ),\r\n    dataIndex: \"saturday\",\r\n    key: \"saturday\",\r\n    width: \"10%\"\r\n  },\r\n  {\r\n    title: \"Total\",\r\n    dataIndex: \"total\",\r\n    key: \"total\",\r\n    width: \"10%\"\r\n  }\r\n];\r\n\r\nconst data = [\r\n  {\r\n    key: \"1\",\r\n    name: \"John Brown\"\r\n  },\r\n  {\r\n    key: \"2\",\r\n    name: \"Jim Green\"\r\n  },\r\n  {\r\n    key: \"3\",\r\n    name: \"Joe Black\"\r\n  }\r\n];\r\n\r\nconst Timesheet = () => {\r\n  return <Table columns={columns} dataSource={data} pagination={false} />;\r\n};\r\n\r\nexport default Timesheet;\r\n","import { Card, Radio } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Summary from \"./summary\";\r\nimport Timesheet from \"./timesheet\";\r\n\r\nconst Reports = (props: any) => {\r\n  let currentReportType = \"summary\";\r\n  const currentPath = props.history.location.pathname;\r\n  if (currentPath.includes(\"detailed\")) {\r\n    currentReportType = \"detailed\";\r\n  }\r\n  if (currentPath.includes(\"timesheet\")) {\r\n    currentReportType = \"timesheet\";\r\n  }\r\n  const [reportType, setReportType] = useState(currentReportType);\r\n  const onReportTypeChange = (e: any) => {\r\n    let path = e.target.value;\r\n    setReportType(path);\r\n    if (path === \"summary\") {\r\n      path = \"\";\r\n    }\r\n    // @ts-ignore\r\n    props.history.push(`/dashboard/reports/${path}`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title={\r\n          <>\r\n            <StyledCardTitle>\r\n              <h1>Reports</h1>\r\n            </StyledCardTitle>\r\n            <Radio.Group value={reportType} onChange={onReportTypeChange}>\r\n              <Radio.Button value=\"summary\">Summary</Radio.Button>\r\n              <Radio.Button value=\"timesheet\">Timesheet</Radio.Button>\r\n            </Radio.Group>\r\n          </>\r\n        }\r\n      >\r\n        <Switch>\r\n          <Route path={`/dashboard/reports`} exact component={Summary} />\r\n          <Route path={`/dashboard/reports/timesheet`} component={Timesheet} />\r\n        </Switch>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nconst StyledCardTitle = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  h1 {\r\n    padding: 8px 0;\r\n  }\r\n`;\r\n\r\nexport default Reports;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_USER_TIMER_RECORDS = gql`\r\n  {\r\n    getUserTimerRecords {\r\n      success\r\n      message\r\n      results {\r\n        id\r\n        duration\r\n        date\r\n        description\r\n        startedAt\r\n        stoppedAt\r\n        type\r\n        task {\r\n          id\r\n          name\r\n        }\r\n        user {\r\n          email\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { Button, Col, Form, Row } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport * as Yup from \"yup\";\r\nimport { CustomCascader } from \"../../../components/fields/formFields\";\r\nimport { GET_PROJECTS_WITH_TASKS } from \"../../../graphql/project/getProjects\";\r\nimport { GET_TIMER } from \"../../../graphql/timer/getTimer\";\r\nimport { START_TIMER } from \"../../../graphql/timer/startTimer\";\r\nimport { STOP_TIMER } from \"../../../graphql/timer/stopTimer\";\r\n\r\nconst startTimerSchema = Yup.object().shape({\r\n  task: Yup.string().required(\"Task is Required\")\r\n});\r\n\r\nconst TimerBox = (props: any) => {\r\n  const { refetchTimerRecords } = props;\r\n  const getProjects = useQuery(GET_PROJECTS_WITH_TASKS);\r\n  const startTimer = useMutation(START_TIMER);\r\n  const getTimer = useQuery(GET_TIMER);\r\n  let currentTimer: any = null;\r\n  if (getTimer.loading) return null;\r\n  if (!getTimer.loading && !getTimer.error) {\r\n    currentTimer = getTimer.data.getTimer.result;\r\n  }\r\n  const handleStartTimer = async (values: any, { resetForm }: any) => {\r\n    const { task } = values;\r\n    const started = await startTimer({\r\n      variables: {\r\n        taskId: task[2]\r\n      }\r\n    });\r\n\r\n    if (started.data.startTimer.success) {\r\n      resetForm();\r\n      getTimer.refetch();\r\n    }\r\n  };\r\n\r\n  let projectsData: any[] = [];\r\n  if (!getProjects.loading && !getProjects.error) {\r\n    const projects = getProjects.data.getProjectWithTasks.results;\r\n    if (projects) {\r\n      projectsData = projects.map((p: any) => {\r\n        p.label = p.name;\r\n        p.value = p.id;\r\n        p.children = p.sections;\r\n        p.children.map((s: any) => {\r\n          s.label = s.name;\r\n          s.value = s.id;\r\n          s.children = s.tasks;\r\n          s.children.map((t: any) => {\r\n            t.label = t.name;\r\n            t.value = t.id;\r\n            return t;\r\n          });\r\n          return s;\r\n        });\r\n        return p;\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{}}\r\n      validationSchema={startTimerSchema}\r\n      onSubmit={handleStartTimer}\r\n      render={(props: any) => (\r\n        <Form layout=\"vertical\" onSubmit={props.handleSubmit}>\r\n          <Row gutter={4} type=\"flex\" justify=\"space-between\" align=\"top\">\r\n            <Col xs={24} lg={20}>\r\n              {currentTimer ? (\r\n                <StyledTaskName>{currentTimer.task.name}</StyledTaskName>\r\n              ) : (\r\n                <CustomCascader\r\n                  name=\"task\"\r\n                  options={projectsData}\r\n                  size=\"large\"\r\n                  style={{ width: \"100%\" }}\r\n                  placeholder=\"Select task from the projects.\"\r\n                />\r\n              )}\r\n            </Col>\r\n            <Col xs={24} lg={4}>\r\n              {currentTimer ? (\r\n                <TimerButton\r\n                  currentTimer={currentTimer}\r\n                  refetchTimer={getTimer.refetch}\r\n                  refetchTimerRecords={refetchTimerRecords}\r\n                />\r\n              ) : (\r\n                <Button\r\n                  type=\"primary\"\r\n                  size=\"large\"\r\n                  style={{ width: \"100%\" }}\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Start Timer\r\n                </Button>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nconst TimerButton = (props: any) => {\r\n  const { currentTimer, refetchTimer, refetchTimerRecords } = props;\r\n  const now = moment();\r\n  const timerStartedAt = currentTimer.startedAt;\r\n  const timerDuration = moment.duration(now.diff(timerStartedAt));\r\n  const [timer, setTimer] = useState(timerDuration);\r\n\r\n  const stopTimer = useMutation(STOP_TIMER);\r\n  const stopTaskTimer = async () => {\r\n    const taskId = currentTimer.task.id;\r\n    await stopTimer({\r\n      variables: {\r\n        taskId\r\n      }\r\n    });\r\n    refetchTimer();\r\n    refetchTimerRecords();\r\n  };\r\n\r\n  const runningTimer = setInterval(() => {\r\n    const now = moment();\r\n    const timerDuration = moment.duration(now.diff(timerStartedAt));\r\n    setTimer(timerDuration);\r\n  }, 1000);\r\n\r\n  useEffect(() => {\r\n    return function cleanup() {\r\n      clearTimeout(runningTimer);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <StyledButton size=\"large\" onClick={() => stopTaskTimer()}>{`${moment\r\n      .utc(timer.asMilliseconds())\r\n      .format(\"HH:mm:ss\")}`}</StyledButton>\r\n  );\r\n};\r\n\r\nconst StyledButton = styled(Button)`\r\n  background: red;\r\n  width: 100%;\r\n  color: #fff;\r\n  &:hover {\r\n    background: red;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst StyledTaskName = styled.p`\r\n  font-size: 20px;\r\n  padding: 10px 0;\r\n`;\r\nexport default TimerBox;\r\n","import { Card, Col, Collapse, Icon, List, Row, Tag } from \"antd\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport styled from \"styled-components\";\r\nimport { GET_USER_TIMER_RECORDS } from \"../../../graphql/timerRecords/getUserTimerRecords\";\r\nimport { groupedTimerRecords } from \"../../../utils/helpers\";\r\nimport TimerBox from \"./timerBox\";\r\n\r\nconst Panel = Collapse.Panel;\r\n\r\nconst Timer = () => {\r\n  const getTimerRecords = useQuery(GET_USER_TIMER_RECORDS);\r\n  if (getTimerRecords.error) {\r\n    return <div>No Timer Records</div>;\r\n  }\r\n\r\n  if (getTimerRecords.loading) {\r\n    return null;\r\n  }\r\n  const timerRecords = getTimerRecords.data.getUserTimerRecords.results;\r\n\r\n  const formattedTmerRecords = groupedTimerRecords(timerRecords);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Card\r\n          title={<TimerBox refetchTimerRecords={getTimerRecords.refetch} />}\r\n        >\r\n          {formattedTmerRecords.length > 0\r\n            ? formattedTmerRecords.map((timerRecord: any) => (\r\n                <>\r\n                  <DateTitle>\r\n                    <h3>{moment(timerRecord.date).fromNow()}</h3>\r\n                    <p>{moment(timerRecord.date).format(\"LL\")}</p>\r\n                  </DateTitle>\r\n                  <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={timerRecord.dateRecords}\r\n                    renderItem={(item: any) => (\r\n                      <List.Item style={{ margin: \"24px 0\" }}>\r\n                        <Row gutter={36} type=\"flex\" justify=\"space-between\">\r\n                          <Col>\r\n                            <div style={{ width: 100 }}>\r\n                              <Icon\r\n                                type=\"clock-circle\"\r\n                                style={{ fontSize: 24, margin: \"4px 16px\" }}\r\n                              />\r\n                              <p>\r\n                                {moment\r\n                                  .utc(item.totalDuration * 1000)\r\n                                  .format(\"HH:mm:ss\")}\r\n                              </p>\r\n                            </div>\r\n                          </Col>\r\n                          <Col>\r\n                            <h3>{item.task}</h3>\r\n                            <StyledCollapse\r\n                              bordered={false}\r\n                              defaultActiveKey={[\"0\"]}\r\n                              expandIcon={({ isActive }) => (\r\n                                <Icon\r\n                                  type=\"caret-right\"\r\n                                  rotate={isActive ? 90 : 0}\r\n                                />\r\n                              )}\r\n                            >\r\n                              <StyledPanel\r\n                                header={<span>History</span>}\r\n                                key=\"1\"\r\n                              >\r\n                                {item.taskRecords.map((taskRecord: any) => (\r\n                                  <RecordHistory>\r\n                                    <p>\r\n                                      <Tag color=\"magenta\">\r\n                                        {taskRecord.type}\r\n                                      </Tag>\r\n                                      {taskRecord.startedAt\r\n                                        ? moment(taskRecord.startedAt).format(\r\n                                            \"LLL\"\r\n                                          )\r\n                                        : moment(taskRecord.date).format(\"LL\")}\r\n                                    </p>\r\n                                    <p className=\"timer-duration\">\r\n                                      {moment\r\n                                        .utc(taskRecord.duration * 1000)\r\n                                        .format(\"HH:mm:ss\")}\r\n                                    </p>\r\n                                  </RecordHistory>\r\n                                ))}\r\n                              </StyledPanel>\r\n                            </StyledCollapse>\r\n                          </Col>\r\n                        </Row>\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                </>\r\n              ))\r\n            : \"No Timer Records.\"}\r\n        </Card>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DateTitle = styled.div`\r\n  display: inline-block;\r\n  display: flex;\r\n  align-items: baseline;\r\n  h3 {\r\n    margin-right: 12px;\r\n  }\r\n`;\r\n\r\nconst StyledPanel = styled(Panel)`\r\n  border-bottom: 0px !important;\r\n  i {\r\n    left: 0 !important;\r\n    color: #888;\r\n  }\r\n`;\r\n\r\nconst StyledCollapse = styled(Collapse)`\r\n  margin: 0;\r\n  .ant-collapse-header {\r\n    padding-left: 16px !important;\r\n    span {\r\n      color: #666;\r\n    }\r\n  }\r\n`;\r\n\r\nconst RecordHistory = styled.div`\r\n  display: flex;\r\n  padding-top: 8px;\r\n  .timer-duration {\r\n    color: #1da57a;\r\n    margin-left: 16px;\r\n  }\r\n`;\r\n\r\nexport default Timer;\r\n","import { Button, Drawer, Layout } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport DashHeader from \"../../components/dashHeader\";\r\nimport DashSideBar from \"../../components/dashSideBar\";\r\nimport ProtectedRoute from \"../../utils/components\";\r\nimport Clients from \"./clients\";\r\nimport Dash from \"./dash\";\r\nimport Expenses from \"./expenses\";\r\nimport Invoices from \"./invoices\";\r\nimport Projects from \"./projects\";\r\nimport SingleProject from \"./projects/singleProject\";\r\nimport Reports from \"./reports\";\r\nimport Timer from \"./timer\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nconst Dashboard = (props: any) => {\r\n  // Slider Collapse\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const onCollapse = (collapsed: boolean) => {\r\n    setCollapsed(collapsed);\r\n  };\r\n\r\n  // Drawer Open and Close\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n  const onDrawerClose = () => {\r\n    setDrawerVisible(false);\r\n  };\r\n  const onDrawerOpen = () => {\r\n    setDrawerVisible(true);\r\n  };\r\n\r\n  return (\r\n    <Layout style={{ minHeight: \"100vh\" }}>\r\n      <StyledSider\r\n        collapsible\r\n        collapsed={collapsed}\r\n        onCollapse={onCollapse}\r\n        style={{ background: \"#fff\" }}\r\n        width={250}\r\n      >\r\n        <div className=\"logo-area\">\r\n          <img\r\n            alt=\"logo\"\r\n            src=\"https://wac-cdn.atlassian.com/dam/jcr:616e6748-ad8c-48d9-ae93-e49019ed5259/Atlassian-horizontal-blue-rgb.svg?cdnVersion=359\"\r\n          />\r\n        </div>\r\n        <DashSideBar />\r\n      </StyledSider>\r\n      <Drawer\r\n        title={\r\n          <div className=\"logo-area\">\r\n            <img\r\n              alt=\"logo\"\r\n              src=\"https://wac-cdn.atlassian.com/dam/jcr:616e6748-ad8c-48d9-ae93-e49019ed5259/Atlassian-horizontal-blue-rgb.svg?cdnVersion=359\"\r\n            />\r\n          </div>\r\n        }\r\n        placement=\"left\"\r\n        onClose={onDrawerClose}\r\n        visible={drawerVisible}\r\n      >\r\n        <DashSideBar />\r\n      </Drawer>\r\n      <Layout>\r\n        <StyledHeader>\r\n          <DrawerOpenerButton onClick={onDrawerOpen} icon=\"menu\" size=\"large\" />\r\n          <DashHeader history={props.history} />\r\n        </StyledHeader>\r\n        <StyledContent>\r\n          <Switch>\r\n            <ProtectedRoute exact path=\"/dashboard\" component={Dash} />\r\n            <ProtectedRoute path=\"/dashboard/timer\" component={Timer} />\r\n            <ProtectedRoute\r\n              path=\"/dashboard/projects\"\r\n              exact\r\n              component={Projects}\r\n            />\r\n            <ProtectedRoute\r\n              path=\"/dashboard/projects/:project\"\r\n              component={SingleProject}\r\n            />\r\n            <ProtectedRoute path=\"/dashboard/clients\" component={Clients} />\r\n            <ProtectedRoute path=\"/dashboard/reports\" component={Reports} />\r\n            <ProtectedRoute path=\"/dashboard/expenses\" component={Expenses} />\r\n            <ProtectedRoute path=\"/dashboard/invoices\" component={Invoices} />\r\n          </Switch>\r\n        </StyledContent>\r\n        <StyledFooter>EvenTime - 2019</StyledFooter>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst StyledSider = styled(Sider)`\r\n  background: #fff;\r\n  .logo-area {\r\n    height: 75px;\r\n    padding: 0;\r\n    margin: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    img {\r\n      width: 180px;\r\n    }\r\n  }\r\n  @media (max-width: 767px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst DrawerOpenerButton = styled(Button)`\r\n  @media (min-width: 768px) {\r\n    display: none;\r\n  }\r\n  margin: 16px;\r\n`;\r\n\r\nconst StyledHeader = styled(Header)`\r\n  background: #fff;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 80px;\r\n  padding: 12px 0;\r\n  border-bottom: 1px solid #e3e3e3;\r\n`;\r\n\r\nconst StyledContent = styled(Content)`\r\n  margin: 0 16px;\r\n  padding: 36px;\r\n  min-height: 450;\r\n\r\n  @media (max-width: 767px) {\r\n    margin: 36px 8px;\r\n    padding: 6px 8px;\r\n  }\r\n`;\r\n\r\nconst StyledFooter = styled(Footer)`\r\n  text-align: center;\r\n`;\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport ProtectedRoute from \"../utils/components\";\r\nimport Login from \"./auth/login\";\r\nimport Register from \"./auth/register\";\r\nimport Dashboard from \"./dashboard\";\r\n\r\nfunction Home() {\r\n  return <Redirect to=\"/dashboard\" />;\r\n}\r\n\r\nfunction MainApp() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <ProtectedRoute path=\"/dashboard\" component={Dashboard} />\r\n        <Route exact path=\"/login\" component={Login} />\r\n        <Route exact path=\"/register\" component={Register} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default MainApp;\r\n","import ApolloClient, { InMemoryCache } from \"apollo-boost\";\r\nimport React, { Suspense } from \"react\";\r\nimport { ApolloProvider as ApolloHooksProvider } from \"react-apollo-hooks\";\r\nimport \"./App.less\";\r\nimport MainApp from \"./containers\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:8000/graphql\",\r\n  credentials: \"include\",\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <ApolloHooksProvider client={client}>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <MainApp />\r\n      </Suspense>\r\n    </ApolloHooksProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}